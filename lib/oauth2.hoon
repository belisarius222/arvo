::  OAUTH 2.0 %AUTHORIZATION
::
::::  /HOON/OAUTH2/LIB
  ::
/+    HEP-TO-CAB, INTERPOLATE
=,  EYRE
=,  MIMES:HTML
=,  HTML
=,  FORMAT
|%
++  PARSE-URL  PARSE-URL:INTERPOLATE
++  JOIN
  |=  {A/CORD B/(LIST CORD)}
  ?~  B  ''
  (RAP 3 |-([I.B ?~(T.B ~ [A $(B T.B)])]))
::
++  POST-QUAY
  |=  {A/PURL B/QUAY}  ^-  HISS
  =.  B  (QUAY:HEP-TO-CAB B)
  =-  [A %POST - ?~(B ~ (SOME (AS-OCTT +:(TAIL:EN-PURL B))))]
  %^  MY
    :+  %ACCEPT
      'APPLICATION/JSON'
    ~
    :+  %CONTENT-TYPE
      'APPLICATION/X-WWW-FORM-URLENCODED'
    ~
    ~
::
++  MEAN-WALL  !.
  |=  {A/TERM B/TAPE}  ^+  !!
  =-  (MEAN (FLOP `TANG`[>A< -]))
  (TURN (TO-WAIN (CRIP B)) |=(C/CORD LEAF+(TRIP C)))
::
++  BAD-RESPONSE  |=(A/@U ?:(=(2 (DIV A 100)) | ~&(BAD-HTTR+A &)))
++  GRAB-JSON
  |*  {A/HTTR B/FIST:DEJS-SOFT:FORMAT}
  ~|  BAD-JSON+R.A
  ~|  (DE-JSON Q:(NEED R.A))
  (NEED (;~(BIFF DE-JSON B) Q:(NEED R.A)))
--
::
::::
  ::
:: XX BELONGS BACK IN ZUSE
|%
++  PACK                                                ::  LIGHT PATH ENCODING
  |=  {A/TERM B/PATH}  ^-  KNOT
  %+  RAP  3  :-  (WACK A)
  (TURN B |=(C/KNOT (CAT 3 '_' (WACK C))))
::
++  PICK                                                ::  LIGHT PATH DECODING
  =+  FEL=(MOST CAB (SEAR WICK URT:AB))
  |=(A/KNOT `(UNIT {P/TERM Q/PATH})`(RUSH A FEL))
::
--
::
::::
  ::
|%
++  TOKEN  ?(~ @T)
++  REFRESH  {TOK/TOKEN EXPIRY/@DA PENDING/_`?`|}
++  BOTH-TOKENS  {TOKEN REFRESH}
++  KEYS  CORD:{CID/@T CIS/@T}
--
::
::::
  ::
=+  STATE-USR=|
|_  {(BALE:EYRE KEYS) TOK/TOKEN}
++  CLIENT-ID      CID:DECODE-KEYS
++  CLIENT-SECRET  CIS:DECODE-KEYS
++  DECODE-KEYS                       :: XX FROM BALE:EYRE W/ TYPED %JAEL
  ^-  {CID/@T CIS/@T ~}
  ?.  =(~ `@`KEY)
    ~|  %OAUTH-BAD-KEYS
    ((HARD {CID/@T CIS/@T ~}) (TO-WAIN KEY))
  %+  MEAN-WALL  %OAUTH-NO-KEYS
  """
  RUN |INIT-OAUTH2 {<`PATH`DOM>}
  IF NECESSARY, OBTAIN CLIENT KEYS CONFIGURED FOR A REDIRECT_URI OF
    {(TRIP REDIRECT-URI)}
  """
::
++  AUTH-URL
  |=  {SCOPES/(LIST @T) URL/$@(@T PURL)}  ^-  PURL
  ~&  [%OAUTH-WARNING "MAKE SURE THIS URBIT ".
                      "IS RUNNING ON {(EN-PURL OUR-HOST `~ ~)}"]
  %+  ADD-QUERY:INTERPOLATE  URL
  %-  QUAY:HEP-TO-CAB
  :~  STATE+?.(STATE-USR '' (PACK USR /''))
      CLIENT-ID+CLIENT-ID
      REDIRECT-URI+REDIRECT-URI
      SCOPE+(JOIN ' ' SCOPES)
  ==
::
::  XX DUPLICATED FROM EYRE
++  PACK                                                ::  LIGHT PATH ENCODING
  |=  {A/TERM B/PATH}  ^-  KNOT
  %+  RAP  3  :-  (WACK A)
  (TURN B |=(C/KNOT (CAT 3 '_' (WACK C))))
::
++  OUR-HOST  .^(HART %E /(SCOT %P OUR)/HOST/REAL)
++  REDIRECT-URI
  %-    CRIP    %-  EN-PURL
  %^  INTO-URL:INTERPOLATE  'HTTPS://OUR-HOST/~/AC/:DOMAIN/:USER/IN'
    `OUR-HOST
  :~  DOMAIN+(JOIN '.' (FLOP DOM))
      USER+?:(STATE-USR '_STATE' (SCOT %TA USR))
  ==
::
::
++  REQUEST-TOKEN
  |=  {A/$@(@T PURL) GRANT-TYPE/CORD QUY/QUAY}  ^-  HISS
  %+  POST-QUAY  (PARSE-URL A)
  %-  QUAY:HEP-TO-CAB
  %+  WELP  QUY
  :~  CLIENT-ID+CLIENT-ID
      CLIENT-SECRET+CLIENT-SECRET
      REDIRECT-URI+REDIRECT-URI
      GRANT-TYPE+GRANT-TYPE
  ==
::
++  REQUEST-TOKEN-BY-CODE
  |=({A/$@(@T PURL) B/@T} (REQUEST-TOKEN A 'AUTHORIZATION_CODE' CODE+B ~))
::
++  GRAB-TOKEN
  |=  A/HTTR  ^-  AXS/@T
  (GRAB-JSON A (OT 'ACCESS_TOKEN'^SO ~):DEJS-SOFT:FORMAT)
::
++  GRAB-EXPIRING-TOKEN
  |=  A/HTTR  ^-  {AXS/@T EXP/@U}
  (GRAB-JSON A (OT 'ACCESS_TOKEN'^SO 'EXPIRES_IN'^NI ~):DEJS-SOFT:FORMAT)
::
++  GRAB-BOTH-TOKENS
  |=  A/HTTR  ^-  {AXS/@T EXP/@U REF/@T}
  %+  GRAB-JSON  A
  =,  DEJS-SOFT:FORMAT
  (OT 'ACCESS_TOKEN'^SO 'EXPIRES_IN'^NI 'REFRESH_TOKEN'^SO ~)
::
++  AUTH
  ?~  TOK  ~|(%NO-BEARER-TOKEN !!)
  |%
  ++  HEADER  `CORD`(CAT 3 'BEARER ' `@T`TOK)
  ++  QUERY   `CORD`TOK
  --
::
++  ADD-AUTH-HEADER
  |=  REQUEST/{URL/PURL METH HED/MATH (UNIT OCTS)}
  ^+  REQUEST
  ::  =.  P.URL.REQUEST  [| `6.000 [%& /LOCALHOST]]       ::  FOR USE WITH UNIX NC
  ~&  ADD-AUTH-HEADER+(EN-PURL URL.REQUEST)
  REQUEST(HED (~(ADD JA HED.REQUEST) %AUTHORIZATION HEADER:AUTH))
::
++  ADD-AUTH-QUERY
  |=  {TOKEN-NAME/CORD REQUEST/{URL/PURL METH MATH (UNIT OCTS)}}
  ^+  REQUEST
  ::  =.  P.URL.REQUEST  [| `6.000 [%& /LOCALHOST]]       ::  FOR USE WITH UNIX NC
  ~&  ADD-AUTH-QUERY+(EN-PURL URL.REQUEST)
  REQUEST(R.URL [[TOKEN-NAME QUERY:AUTH] R.URL.REQUEST])
::
++  RE
  |_  REF/REFRESH
  ++  NEEDS-REFRESH  ?~(TOK.REF | IS-EXPIRED)
  ++  IS-EXPIRED  (LTH EXPIRY.REF (ADD NOW ~M5))
  ++  UPDATE
    |=  EXP/@U  ^+  REF
    REF(PENDING |, EXPIRY (ADD NOW (MUL ~S1 EXP)))
  ::
  ++  UPDATE-IF-NEEDED
    |=  EXCHANGE-URL/$@(@T PURL)
    ^-  {(UNIT HISS) REFRESH}
    ?~  TOK.REF  `REF
    ?.  IS-EXPIRED  `REF
    :_  REF(PENDING &)
    `(REQUEST-TOKEN EXCHANGE-URL 'REFRESH_TOKEN' REFRESH-TOKEN+TOK.REF ~)
  --
::
::  EXPECTED SEMANTICS, TO BE COPIED AND MODIFIED IF ANYTHING DOESN'T WORK
++  STANDARD
  |*  {DONE/* SAVE/$-(TOKEN *)}
  |%
  ++  SAVE  ^-($-(TOKEN _DONE) ^SAVE)                   ::  SHADOW(TYPE CANARY)
  ++  CORE-MOVE  $^({SEC-MOVE _DONE} SEC-MOVE)          ::  STATEFUL
  ::
  ::  INSERT TOKEN INTO QUERY STRING. EXPECTS:
  ::    ++  IN   (IN-CODE-TO-TOKEN 'HTTP://...')        ::  HANDLE CALLBACK
  ++  OUT-ADD-QUERY-PARAM
    |=  {TOKEN-NAME/KNOT SCOPES/(LIST CORD) DIALOG/$@(@T PURL)}
    ::
    |=  A/HISS  ^-  $%({$SEND HISS} {$SHOW PURL})
    ?~  TOK  [%SHOW (AUTH-URL SCOPES DIALOG)]
    [%SEND (ADD-AUTH-QUERY TOKEN-NAME A)]
  ::
  ::  ADD TOKEN AS A HEADER. EXPECTS:
  ::    ++  IN   (IN-CODE-TO-TOKEN 'HTTP://...')        ::  HANDLE CALLBACK
  ++  OUT-ADD-HEADER
    |=  {SCOPES/(LIST CORD) DIALOG/$@(@T PURL)}
    ::
    |=  A/HISS  ^-  SEC-MOVE
    ?~  TOK  [%SHOW (AUTH-URL SCOPES DIALOG)]
    [%SEND (ADD-AUTH-HEADER A)]
  ::
  ::  EXCHANGE CODE IN QUERY STRING FOR ACCESS TOKEN. EXPECTS:
  ::    ++  BAK  BAK-SAVE-TOKEN                         :: SAVE ACCESS TOKEN
  ++  IN-CODE-TO-TOKEN
    |=  EXCHANGE-URL/$@(@T PURL)
    ::
    |=  A/QUAY  ^-  SEC-MOVE
    =+  CODE=~|(%NO-CODE (~(GOT BY (MALT A)) %CODE))
    [%SEND (REQUEST-TOKEN-BY-CODE EXCHANGE-URL CODE)]
  ::
  ::  IF AN ACCESS TOKEN HAS BEEN RETURNED, SAVE IT
  ++  BAK-SAVE-TOKEN
    |=  A/HTTR  ^-  CORE-MOVE
    ?:  (BAD-RESPONSE P.A)
      [%GIVE A]  :: [%REDO ~]  ::  HANDLE 4XX?
    [[%REDO ~] (SAVE `TOKEN`(GRAB-TOKEN A))]
  --
::
++  STANDARD-REFRESHING
  |*  {DONE/* REF/REFRESH SAVE/$-({TOKEN REFRESH} *)}
  =+  S=(STANDARD DONE |=(TOK/TOKEN (SAVE TOK REF)))
  |%
  ++  SAVE  ^-($-(BOTH-TOKENS _DONE) ^SAVE)             ::  SHADOW(TYPE CANARY)
  ++  CORE-MOVE  $^({SEC-MOVE _DONE} SEC-MOVE)          ::  STATEFUL
  ::
  ::  SEE ++OUT-ADD-QUERY-PARAM:STANDARD
  ::  REFRESH TOKEN IF WE HAVE AN EXPIRED ONE, ASK FOR AUTHENTICATION IF NONE IS PRESENT,
  ::  INSERT AUTH TOKEN INTO THE QUERY STRING IF IT'S VALID. EXPECTS:
  ::    ++  IN   (IN-CODE-TO-TOKEN 'HTTP://...')        ::  HANDLE CALLBACK
  ::    ++  RES  RES-SAVE-AFTER-REFRESH
  ++  OUT-REFRESH-OR-ADD-QUERY-PARAM
    |=  {EXCHANGE/$@(@T PURL) S-ARGS/{KNOT (LIST CORD) $@(@T PURL)}}
    ::
    |=  A/HISS  ^-  CORE-MOVE
    =^  UPD  REF  (~(UPDATE-IF-NEEDED RE REF) EXCHANGE)
    ?^  UPD  [[%SEND U.UPD] (SAVE TOK REF)]
    %.(A (OUT-ADD-QUERY-PARAM.S S-ARGS))
  ::
  ::  SEE ++OUT-ADD-HEADER:STANDARD
  ::  REFRESH TOKEN IF WE HAVE AN EXPIRED ONE, ASK FOR AUTHENTICATION IF NONE IS PRESENT,
  ::  ADD TOKEN AS A HEADER IF IT'S VALID. EXPECTS:
  ::    ++  IN   (IN-CODE-TO-TOKEN 'HTTP://...')        ::  HANDLE CALLBACK
  ::    ++  RES  RES-SAVE-AFTER-REFRESH
  ++  OUT-REFRESH-OR-ADD-HEADER
    |=  {EXCHANGE/$@(@T PURL) S-ARGS/{(LIST CORD) DIALOG/$@(@T PURL)}}
    ::
    |=  A/HISS  ^-  CORE-MOVE
    =^  UPD  REF  (~(UPDATE-IF-NEEDED RE REF) EXCHANGE)
    ?^  UPD  [[%SEND U.UPD] (SAVE TOK REF)]
    %.(A (OUT-ADD-HEADER.S S-ARGS))
  ::
  ::  IF THE LAST REQUEST REFRESHED THE ACCESS TOKEN, SAVE IT.
  ++  RES-SAVE-AFTER-REFRESH
    |=  A/HTTR  ^-  CORE-MOVE
    ?.  PENDING.REF  [%GIVE A]
    =+  `{AXS/TOKEN EXP/@U}`(GRAB-EXPIRING-TOKEN A)
    =.  REF  (~(UPDATE RE REF) EXP)
    [[%REDO ~] (SAVE AXS REF)]
  ::
  ::  EXCHANGE CODE IN QUERY STRING FOR ACCESS AND REFRESH TOKENS. EXPECTS:
  ::    ++  BAK  BAK-SAVE-BOTH-TOKENS                   :: SAVE ACCESS TOKEN
  ++  IN-CODE-TO-TOKEN  IN-CODE-TO-TOKEN.S
  ::
  ::  IF VALID ACCESS AND REFRESH TOKENS HAVE BEEN RETURNED, SAVE THEM
  ++  BAK-SAVE-BOTH-TOKENS
    |=  A/HTTR  ^-  CORE-MOVE
    =+  `{AXS/TOKEN EXP/@U REF-NEW/TOKEN}`(GRAB-BOTH-TOKENS A)
    =.  TOK.REF  REF-NEW
    =.  REF  (~(UPDATE RE REF) EXP)
    [[%REDO ~] (SAVE AXS REF)]
  --
--
::
::  XX MOVE-ME
::
::
::::  EXAMPLE "STANDARD" SEC/ CORE:
  ::
::
::  ::
::  ::::  /HOON/MY-API/COM/SEC
::    ::
::  /+    OAUTH2
::  ::
::  ::::
::    ::
::  |_  {BAL/(BALE:EYRE KEYS:OAUTH2) TOK/TOKEN:OAUTH2}
::  ++  AUT  (~(STANDARD OAUTH2 BAL TOK) . |=(TOK/TOKEN:OAUTH2 +>(TOK TOK)))
::  ++  OUT
::    %+  OUT-ADD-HEADER:AUT  SCOPE=/FULL
::    OAUTH-DIALOG='HTTPS://MY-API.COM/AUTHORIZE'
::  ::
::  ++  IN
::    %-  IN-CODE-TO-TOKEN:AUT
::    EXCHANGE-URL='HTTPS://MY-API.COM/ACCESS_TOKEN'
::  ::
::  ++  BAK  BAK-SAVE-TOKEN:AUT
::  --
::
::
::::  EQUIVALENT IMPERATIVE CODE:
  ::
::
::  ::
::  ::::  /HOON/MY-API/COM/SEC
::    ::
::  /+    OAUTH2
::  ::
::  ::::
::    ::
::  |_  {BAL/(BALE:EYRE KEYS:OAUTH2) TOK/TOKEN:OAUTH2}
::  ++  AUT  ~(. OAUTH2 BAL TOK)
::  ++  OUT  ::  ADD HEADER
::    =+  AUT
::    |=  REQ/HISS  ^-  $%({$SEND HISS} {$SHOW PURL})
::    ?~  TOK
::      [%SHOW (AUTH-URL SCOPE=/FULL 'HTTPS://MY-API.COM/AUTHORIZE')]
::    [%SEND (ADD-AUTH-HEADER REQ)]
::  ::
::  ++  IN  :: CODE TO TOKEN
::    =+  AUT
::    |=  INP/QUAY  ^-  {$SEND HISS}
::    =+  CODE=~|(%NO-CODE (~(GOT BY (MALT INP)) %CODE))
::    [%SEND (REQUEST-TOKEN-BY-CODE 'HTTPS://MY-API.COM/ACCESS_TOKEN' CODE)]
::  ::
::  ++  BAK  ::  SAVE TOKEN
::    =+  AUT
::    |=  BAK/HTTR  ^-  $%({{$REDO ~} _..BAK} {$GIVE HTTR})
::    ?:  (BAD-RESPONSE BAK)  [%GIVE BAK]
::    =.  TOK  (GRAB-TOKEN BAK)
::    [[%REDO ~] ..BAK]
::  --
::
:::   :::
  ::::: ::
:::   :::
::
::::  EXAMPLE "STANDARD-REFRESHING" SEC/ CORE:
  ::
::
::  ::
::  ::::  /HOON/MY-API/COM/SEC
::    ::
::  /+    OAUTH2
::  ::
::  ::::
::    ::
::  |_  {BAL/(BALE:EYRE KEYS:OAUTH2) TOK/TOKEN:OAUTH2 REF/REFRESH:OAUTH2}
::  ++  AUT
::    %^  ~(STANDARD-REFRESHING OAUTH2 BAL TOK)  .  REF
::    |=({TOK/TOKEN REF/REFRESH}:OAUTH2 +>(TOK TOK, REF REF))
::  ::
::  ++  EXCHANGE-URL  'HTTPS://MY-API.COM/ACCESS_TOKEN'
::  ++  OUT
::    %^  OUT-REFRESH-OR-ADD-HEADER:AUT  EXCHANGE-URL
::      SCOPE=/FULL
::    OAUTH-DIALOG='HTTPS://MY-API.COM/AUTHORIZE'
::  ::
::  ++  RES  RES-SAVE-AFTER-REFRESH:AUT
::  ++  IN  (IN-CODE-TO-TOKEN:AUT EXCHANGE-URL)
::  ++  BAK  BAK-SAVE-BOTH-TOKENS:AUT
::  --
::
::
::::  EQUIVALENT IMPERATIVE CODE:
  ::
::
::  ::
::  ::::  /HOON/MY-API/COM/SEC
::    ::
::  /+    OAUTH2
::  ::
::  ::::
::    ::
::  |_  {BAL/(BALE:EYRE KEYS:OAUTH2) AXS/TOKEN:OAUTH2 REF/REFRESH:OAUTH2}
::  ++  AUT  ~(. OAUTH2 BAL AXS)
::  ++  EXCHANGE-URL  'HTTPS://MY-API.COM/ACCESS_TOKEN'
::  ++  OUT  :: REFRESH OR ADD HEADER
::    =+  AUT
::    |=  REQ/HISS  ^-  $^({{$SEND HISS} _..OUT} $%({$SEND HISS} {$SHOW PURL}))
::    ?~  AXS
::      [%SHOW (AUTH-URL SCOPE=/FULL 'HTTPS://MY-API.COM/AUTHORIZE')]
::    =^  UPD  REF  (~(UPDATE-IF-NEEDED RE REF) EXCHANGE-URL)
::    ?^  UPD  [[%SEND U.UPD] ..OUT]
::    [%SEND (ADD-AUTH-HEADER REQ)]
::   ::
::  ++  RES  :: SAVE AFTER REFRESH
::    =+  AUT
::    |=  A/HTTR  ^-  $^({{$REDO ~} _..RES} {$GIVE HTTR})
::    ?.  PENDING.REF  [%GIVE A]
::    =+  `{AXS/TOKEN EXP/@U}`(GRAB-EXPIRING-TOKEN A)
::    [[%REDO ~] ..OUT(AXS AXS, REF (~(UPDATE RE REF) EXP))]
::  ::
::  ++  IN  :: EXCHANGE TOKEN
::    =+  AUT
::    |=  INP/QUAY  ^-  {$SEND HISS}
::    =+  CODE=~|(%NO-CODE (~(GOT BY (MALT INP)) %CODE))
::    [%SEND (REQUEST-TOKEN-BY-CODE EXCHANGE-URL CODE)]
::
::   ++  BAK  :: SAVE BOTH TOKENS
::     =+  AUT
::     |=  A/HTTR  ^-  {{$REDO ~} _..RES}
::     =+  `{AXS/TOKEN EXP/@U REF-NEW/TOKEN}`(GRAB-BOTH-TOKENS A)
::     =.  TOK.REF  REF-NEW
::     [[%REDO ~] ..BAK(AXS AXS, REF (~(UPDATE RE REF) EXP))]
::  ::
::  ::
::  ++  BAK
::    =+  AUT
::    |=  BAK/HTTR  ^-  $%({{$REDO ~} _..BAK} {$GIVE HTTR})
::    ?:  (BAD-RESPONSE BAK)  [%GIVE BAK]
::    =.  TOK  (GRAB-TOKEN BAK)
::    [[%REDO ~] ..BAK]
::  --
::
