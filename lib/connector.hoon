::  THIS IS A LIBRARY FOR WRITING API CONNECTORS.
::
::  THE BASIC FLOW IS AS FOLLOWS:
::  --  DEFINE A LIST OF `++PLACE`S, WHICH SPECIFY THE EXPORTED
::      INTERFACE.
::  --  IN `++PEER-SCRY` IN THE CONNECTOR APP, CALL `++READ` IN
::      THIS LIBRARY TO MATCH TO THE APPROPRIATE PLACE AND
::      PRODUCE A MOVE (USUALLY EITHER AN IMMEDIATE RESPONSE OR
::      AN HTTP REQUEST TO THE API).
::  --  IN `++SIGH-HTTR` IN THE CONNECTOR APP, CALL `++SIGH` IN
::      THIS LIBRARY TO HANDLE THE RESPONSE ACCORDING TO THE
::      PLACE.
|*  {MOVE/MOLD SUB-RESULT/MOLD}
=>  |%
    ::  A PLACE CONSISTS OF:
    ::  --  `GUARD`, THE TYPE OF THE PATHS WE SHOULD MATCH.  FOR
    ::      EXAMPLE, TO MATCH `/ISSUES/<USER>/<REPO>` USE
    ::      `{$ISSUES @T @T ~}`.
    ::  --  `READ-X`, CALLED WHEN SOMEONE TRIES TO READ THE
    ::      PLACE WITH CARE `%X`.  SHOULD PRODUCE A SINGLE MOVE,
    ::      USUALLY EITHER A `%DIFF` RESPONSE IF WE CAN
    ::      IMMEDIATELY ANSWER OR A `%HISS` HTTP REQUEST IF WE
    ::      NEED TO MAKE A REQUEST TO THE API.  SEE THE
    ::      `++READ-*` FUNCTIONS IN `++HELPERS` FOR SOME COMMON
    ::      HANDLERS.
    ::  --  `READ-Y`, SAME AS `READ-X` EXCEPT WITH CARE `%Y`.
    ::  --  `SIGH-X`, CALLED WHEN AN HTTP RESPONSE COMES BACK ON
    ::      THIS PLACE.  YOU'RE GIVEN THE JSON OF THE RESULT, AND
    ::      YOU SHOULD PRODUCE EITHER A RESULT OR NULL.  NULL
    ::      REPRESENTS AN ERROR.  IF YOU DIDN'T CREATE AN HTTP
    ::      REQUEST IN `READ-X`, THEN THIS SHOULD NEVER BE
    ::      CALLED.  USE `++SIGH-STRANGE` FROM `++HELPERS` TO
    ::      UNCONDITIONALLY SIGNAL AN ERROR.
    ::  --  `SIGH-Y`, SAME AS `SIGH-X` EXCEPT WITH CARE `%Y`.
    ::      NOTE THAT A `%Y` REQUEST MUST PRODUCE AN ARCH, UNLIKE
    ::      A `%X` REQUEST, WHICH MAY PRODUCE DATA OF ANY MARK.
    ::
    ++  PLACE
      $:  GUARD/MOLD
          READ-X/$-(PATH MOVE)
          READ-Y/$-(PATH MOVE)
          SIGH-X/$-(JON/JSON (UNIT SUB-RESULT))
          SIGH-Y/$-(JON/JSON (UNIT ARCH))
      ==
    --
|%
::  GENERIC HELPERS FOR PLACE DEFINITIONS
::
++  HELPERS
  |=  {OST/BONE WIR/WIRE API-URL/TAPE}
  |%
  ::  PRODUCE NULL.  USED AS `++READ-X` IN PLACES WHICH ARE PURE
  ::  DIRECTORIES.  `++SIGH-X` SHOULD BE `++SIGH-STRANGE`.
  ::
  ++  READ-NULL  |=(PAX/PATH [OST %DIFF %NULL ~])
  ::
  ::  PRODUCE AN ARCH WITH THE GIVEN LIST OF CHILDREN.  USED AS
  ::  `++READ-Y` IN PLACES WHICH HAVE A STATIC LIST OF (KNOWN)
  ::  CHILDREN RATHER THAN HAVING TO ASK THE API.  `++SIGH-Y`
  ::  SHOULD BE `++SIGH-STRANGE`.
  ::
  ++  READ-STATIC
    |=  CHILDREN/(LIST @T)
    |=  PAX/PATH
    [OST %DIFF %ARCH ~ (MALT (TURN CHILDREN |=(@T [+< ~])))]
  ::
  ::  PRODUCE AN API REQUEST TO THE GIVEN PATH.  USE THIS IF THE
  ::  ENDPOINT IS STATIC.  IF THE ENDPOINT DEPENDS ON PARAMETERS
  ::  IN THE PATH, USE `++GET`.  FOR EXAMPLE:
  ::  `|=(PAX/PATH (GET /USERS/[+<.PAX]/REPOS))`.
  ::
  ++  READ-GET
    |=  ENDPOINT/PATH
    |=  PAX/PATH
    (GET ENDPOINT)
  ::
  ::  MAKE AN API REQUEST TO THE SPECIFIED ENDPOINT.
  ::
  ++  GET
    |=  ENDPOINT/PATH
    ^-  MOVE
    :*  OST  %HISS  WIR  `~  %HTTR  %HISS
        (ENDPOINT-TO-PURL ENDPOINT)  %GET  ~  ~
    ==
  ::
  ::  CONVERT AN ENDPOINT PATH TO A PURL.
  ::
  ++  ENDPOINT-TO-PURL
    |=  ENDPOINT/PATH
    (SCAN (WELD API-URL <`PATH`ENDPOINT>) AURI:DE-PURL:HTML)
  ::
  ::  RETURN ERROR.  USED WHEN NO HTTP RESPONSE IS EXPECTED.
  ::
  ++  SIGH-STRANGE  |=(JON/JSON ~)
  --
::
::  HANDLES ONE-TIME REQUESTS BY MAPPING THEM TO THEIR HANDLING,
::  EITHER `READ-X` OR `READ-Y`, IN `PLACES`.
::
++  READ
  |=  {OST/BONE PLACES/(LIST PLACE) REN/CARE:CLAY PAX/PATH}
  ^-  MOVE
  ?~  PLACES
    ~&  [%STRANGE-PATH PAX]
    (MOVE [OST %DIFF ?+(REN !! $X NULL+~, $Y ARCH+*ARCH)])
  =+  MATCH=((SOFT GUARD.I.PLACES) PAX)
  ?~  MATCH
    $(PLACES T.PLACES)
  (?+(REN !! $X READ-X.I.PLACES, $Y READ-Y.I.PLACES) PAX)
::
::  HANDLES HTTP RESPONSES SENT IN `++READ` BY MAPPING THEM TO
::  THEIR HANDLING, EITHER `SIGH-X` OR `SIGH-Y`, IN `PLACES`.
::
++  SIGH
  =,  HTML
  =,  EYRE
  |=  {PLACES/(LIST PLACE) REN/CARE:CLAY PAX/PATH RES/HTTR:EYRE}
  ^-  SUB-RESULT
  =<  ?+(REN ~|([%INVALID-CARE REN] !!) $X SIGH-X, $Y SIGH-Y)
  |%
  ++  SIGH-X
    ?~  R.RES
      ~&  [ERR+%EMPTY-RESPONSE CODE+P.RES]
      NULL+~
    =+  JON=(RUSH Q.U.R.RES APEX:DE-JSON)
    ?~  JON
      ~&  [ERR+%BAD-JSON CODE+P.RES BODY+Q.U.R.RES]
      NULL+~
    ?.  =(2 (DIV P.RES 100))
      ~&  [ERR+%REQUEST-REJECTED CODE+P.RES MSG+U.JON]
      NULL+~
    |-  ^-  SUB-RESULT
    ?~  PLACES
      ~&([%SIGH-STRANGE-PATH PAX] (SUB-RESULT NULL+~))
    =+  MATCH=((SOFT GUARD.I.PLACES) PAX)
    ?~  MATCH
      $(PLACES T.PLACES)
    =+  (SIGH-X.I.PLACES U.JON)
    ?~  -
      ~&  [ERR+S+%RESPONSE-NOT-VALID PAX+PAX CODE+(NUMB:ENJS:FORMAT P.RES) MSG+U.JON]
      (SUB-RESULT NULL+~)
    U.-
  ::
  ++  SIGH-Y
    ?~  R.RES
      ~&  [ERR+S+%EMPTY-RESPONSE CODE+(NUMB:ENJS:FORMAT P.RES)]
      ARCH+*ARCH
    =+  JON=(RUSH Q.U.R.RES APEX:DE-JSON)
    ?~  JON
      ~&  [ERR+S+%BAD-JSON CODE+(NUMB:ENJS:FORMAT P.RES) BODY+S+Q.U.R.RES]
      ARCH+*ARCH
    ?.  =(2 (DIV P.RES 100))
      ~&  [ERR+S+%REQUEST-REJECTED CODE+(NUMB:ENJS:FORMAT P.RES) MSG+U.JON]
      ARCH+*ARCH
    %-  SUB-RESULT
    |-  ^-  {$ARCH ARCH}
    ?~  PLACES
      ~&([%SIGH-STRANGE-PATH PAX] ARCH+*ARCH)
    =+  MATCH=((SOFT GUARD.I.PLACES) PAX)
    ?~  MATCH
      $(PLACES T.PLACES)
    =+  (SIGH-Y.I.PLACES U.JON)
    ?~  -
      ~&  [ERR+S+%RESPONSE-NOT-VALID PAX+PAX CODE+(NUMB:ENJS:FORMAT P.RES) MSG+U.JON]
      ARCH+*ARCH
    ARCH+U.-
  --
--
