/-  ASN1, HALL
/+  BASE64, DER, PRIMITIVE-RSA, *PKCS, *JOSE
=,  EYRE
=*  RSA  PRIMITIVE-RSA
::
|%
::  +EN-BASE64URL: URL-SAFE BASE64 ENCODING, WITHOUT PADDING
::
++  EN-BASE64URL
  ~(EN BASE64 | &)
::  +DE-BASE64URL: URL-SAFE BASE64 DECODING, WITHOUT PADDING
::
++  DE-BASE64URL
  ~(DE BASE64 | &)
::  |OCTN: ENCODE/DECODE UNSIGNED ATOMS AS BIG-ENDIAN OCTET STREAM
::
++  OCTN
  |%
  ++  EN  |=(A=@U `OCTS`[(MET 3 A) (SWP 3 A)])
  ++  DE  |=(A=OCTS `@U`(REV 3 P.A Q.A))
  --
::  |BODY: ACME API RESPONSE BODY TYPES
::
++  BODY
  |%
  +$  ACCT  [ID=@T WEN=@T SAS=@T]
  ::
  +$  ORDER
    $:  EXP=@T
        SAS=@T
        AUT=(LIST PURL)
        FIN=(UNIT PURL)
        CER=(UNIT PURL)
    ==
  ::
  +$  AUTH
    $:  DOM=TURF
        SAS=@T
        EXP=@T
        CAL=CHALLENGE
    ==
  ::
  +$  CHALLENGE  [TYP=@T SAS=@T URL=PURL TOK=@T ERR=(UNIT ERROR)]
  ::
  +$  ERROR  [TYPE=@T DETAIL=@T]
  --
::
::  |GRAB: ACME API RESPONSE JSON REPARSERS
::
++  GRAB
  =,  DEJS:FORMAT
  |%
  ::  +JSON-PURL: PARSE URL
  ::
  ++  JSON-PURL  (SU AURI:DE-PURL:HTML)
  ::  +JSON-DATE: PARSE ISO-8601
  ::
  ::    XX ACTUALLY PARSE
  ::
  ++  JSON-DATE  SO
  ::  +DIRECTORY: PARSE ACME SERVICE DIRECTORY
  ::
  ++  DIRECTORY
    %-  OT
    :~  'NEWACCOUNT'^JSON-PURL
        'NEWNONCE'^JSON-PURL
        'NEWORDER'^JSON-PURL
        'REVOKECERT'^JSON-PURL
        'KEYCHANGE'^JSON-PURL
    ==
  ::  +ACCT: PARSE ACME SERVICE ACCOUNT
  ::
  ++  ACCT
    ^-  $-(JSON ACCT:BODY)
    ::  IGNORING KEY, CONTACT, INITIALIP
    ::
    (OT 'ID'^NO 'CREATEDAT'^JSON-DATE 'STATUS'^SO ~)
  ::  +ORDER: PARSE CERTIFICATE ORDER
  ::
  ++  ORDER
    ^-  $-(JSON ORDER:BODY)
    %-  OU
    :~  'EXPIRES'^(UN JSON-DATE)
        'STATUS'^(UN SO)
        'AUTHORIZATIONS'^(UF ~ (AR JSON-PURL))
        'FINALIZE'^(UF ~ (MU JSON-PURL))
        'CERTIFICATE'^(UF ~ (MU JSON-PURL))
    ==
  ::  +AUTH: PARSE AUTHORIZATION
  ::
  ++  AUTH
    =>  |%
        ::  +IDEN: EXTRACT +TURF FROM SERVICE IDENTIFIER
        ::
        ++  IDEN
          |=  [TYP=@T HOT=HOST]
          ^-  TURF
          ?>(&(?=(%DNS TYP) ?=([%& *] HOT)) P.HOT)
        ::  +HTTP-TRIAL: EXTRACT %HTTP-01 CHALLENGE
        ::
        ++  TRIAL
          |=  A=(LIST CHALLENGE:BODY)
          ^-  CHALLENGE:BODY
          =/  B  (SKIM A |=([TYP=@T *] ?=(%HTTP-01 TYP)))
          ?>(?=(^ B) I.B)
        --
    ^-  $-(JSON AUTH:BODY)
    %-  OT
    :~  'IDENTIFIER'^(CU IDEN (OT TYPE+SO VALUE+(SU THOS:DE-PURL:HTML) ~))
        'STATUS'^SO
        'EXPIRES'^JSON-DATE
        'CHALLENGES'^(CU TRIAL (AR CHALLENGE))
    ==
  ::  +CHALLENGE: PARSE DOMAIN VALIDATION CHALLENGE
  ::
  ++  CHALLENGE
    ^-  $-(JSON CHALLENGE:BODY)
    %-  OU
    :~  'TYPE'^(UN SO)
        'STATUS'^(UN SO)
        'URL'^(UN JSON-PURL)
        'TOKEN'^(UN SO)
        'ERROR'^(UF ~ (MU ERROR))
    ==
  ::  +ERROR: PARSE ACME SERVICE ERROR RESPONSE
  ::
  ++  ERROR
    ^-  $-(JSON ERROR:BODY)
    (OT TYPE+SO DETAIL+SO ~)
  --
--
::
::::  ACME STATE
::
|%
::  +MOVE: OUTPUT EFFECT
::
+$  MOVE  [BONE CARD]
::  +CARD: OUTPUT EFFECT PAYLOAD
::
+$  CARD
  $%  [%HISS WIRE ~ %HTTR %HISS HISS:EYRE]
      [%POKE WIRE DOCK POKE]
      [%RULE WIRE %CERT (UNIT [WAIN WAIN])]
      [%WAIT WIRE @DA]
      [%WELL WIRE PATH (UNIT MIME)]
  ==
::  +POKE: OUTGOING APP POKES
::
+$  POKE
  $%  [%HALL-ACTION %PHRASE AUDIENCE:HALL (LIST SPEECH:HALL)]
  ==
::  +NONCE-NEXT: NEXT EFFECT TO EMIT UPON RECEIVING NONCE
::
+$  NONCE-NEXT
  $?  %REGISTER
      %NEW-ORDER
      %FINALIZE-ORDER
      %FINALIZE-TRIAL
  ==
::  +ACCT: AN ACME SERVICE ACCOUNT
::
+$  ACCT
  $:  ::  KEY: ACCOUNT KEYPAIR
      ::
      KEY=KEY:RSA
      ::  REG: ACCOUNT REGISTRATION
      ::
      ::    XX WEN=@DA ONCE PARSER IS FIXED
      ::
      REG=(UNIT [WEN=@T KID=@T])
  ==
::  +CONFIG: FINALIZED CONFIGURATION
::
+$  CONFIG
  $:  ::  DOM: DOMAINS
      ::
      DOM=(SET TURF)
      ::  KEY: CERTIFICATE KEYPAIR
      ::
      KEY=KEY:RSA
      ::  CER: SIGNED CERTIFICATE
      ::
      CER=WAIN
      ::  EXP: EXPIRATION DATE
      ::
      EXP=@DA
      ::  DOR: SOURCE ACME SERVICE ORDER URL
      ::
      DOR=PURL
  ==
::  +TRIAL: DOMAIN VALIDATION CHALLENGE
::
+$  TRIAL
  $%  ::  %HTTP ONLY FOR NOW
      ::
      $:  %HTTP
          ::  EGO: ACME SERVICE CHALLENGE URL
          ::
          EGO=PURL
          ::  TOK: CHALLENGE TOKEN
          ::
          TOK=@T
          ::  SAS: CHALLENGE STATUS
          ::
          SAS=?(%RECV %PEND %AUTH)
  ==  ==
::  +AUTH: DOMAIN AUTHORIZATION
::
+$  AUTH
  $:  ::  EGO: ACME SERVICE AUTHORIZATION URL
      ::
      EGO=PURL
      ::  DOM: DOMAIN UNDER AUTHORIZATION
      ::
      DOM=TURF
      ::  CAL: DOMAIN VALIDATION CHALLENGE
      ::
      CAL=TRIAL
  ==
::  +ORDER-AUTH: DOMAIN AUTHORIZATION STATE FOR ORDER PROCESSING
::
+$  ORDER-AUTH
  $:  ::  PENDING: REMOTE AUTHORIZATION URLS
      ::
      PENDING=(LIST PURL)
      ::  ACTIVE: AUTHORIZATION IN PROGRESS
      ::
      ACTIVE=(UNIT [IDX=@ AUTH])
      ::  DONE: FINALIZED AUTHORIZATIONS (XX OR FAILED?)
      ::
      DONE=(LIST AUTH)
  ==
::  +ORDER: ACME CERTIFICATE ORDER
::
+$  ORDER
  $:  ::  DOM: DOMAINS
      ::
      DOM=(SET TURF)
      ::  TRY: ATTEMPT NUMBER
      ::
      TRY=@UD
      ::  SAS: ORDER STATE
      ::
      SAS=$@(%WAKE [%REST WEN=@DA])
      ::  EXP: EXPIRATION DATE
      ::
      ::    XX @DA ONCE ISO-8601 PARSER
      ::
      EXP=@T
      ::  EGO: ACME SERVICE ORDER URL
      ::
      EGO=PURL
      ::  FIN: ACME SERVICE ORDER FINALIZATION URL
      ::
      FIN=PURL
      ::  KEY: CERTIFICATE KEYPAIR
      ::
      KEY=KEY:RSA
      ::  CSR: DER-ENCODED PKCS10 CERTIFICATE SIGNING REQUEST
      ::
      CSR=@UX
      ::  AUT: AUTHORIZATIONS REQUIRED BY THIS ORDER
      ::
      AUT=ORDER-AUTH
  ==
::  +HISTORY: ARCHIVE OF PAST ACME SERVICE INTERACTIONS
::
+$  HISTORY
  $:  ::  ACT: LIST OF REVOKED ACCOUNT KEYPAIRS
      ::
      ACT=(LIST ACCT)
      ::  FIG: LIST OF EXPIRED CONFIGURATIONS
      ::
      FIG=(LIST CONFIG)
      ::  FAL: LIST OF FAILED ORDER ATTEMPTS
      ::
      FAL=(LIST ORDER)
  ==
::  +DIRECTORY: ACME V2 SERVICE DIRECTORY
::
+$  DIRECTORY
  $:  ::  REGISTER: REGISTRATION URL (NEWACCOUNT)
      ::
      REGISTER=PURL
      ::  NONCE: NONCE CREATION URL (NEWNONCE)
      ::
      NONCE=PURL
      ::  NEW-ORDER: ORDER CREATION URL (NEWORDER)
      ::
      NEW-ORDER=PURL
      ::  REVOKE: CERTIFICATE REVOCATION URL (REVOKECERT)
      ::
      REVOKE=PURL
      ::  REKEY: ACCOUNT KEY REVOCATION URL (KEYCHANGE)
      ::
      REKEY=PURL
  ==
::  +ACME: COMPLETE APP STATE
::
+$  ACME
  $:  ::  DIR: ACME SERVICE DIRECTORY
      ::
      DIR=DIRECTORY
      ::  ACT: ACME SERVICE ACCOUNT
      ::
      ACT=ACCT
      ::  LIV: ACTIVE, LIVE CONFIGURATION
      ::
      LIV=(UNIT CONFIG)
      ::  HIT: ACME ACCOUNT HISTORY
      ::
      HIT=HISTORY
      ::  NONCES: LIST OF UNUSED NONCES
      ::
      NONCES=(LIST @T)
      ::  ROD: ACTIVE, IN-PROGRESS ORDER
      ::
      ROD=(UNIT ORDER)
      ::  NEXT-ORDER: QUEUED DOMAINS FOR VALIDATION
      ::
      NEXT-ORDER=(UNIT (MAP TURF [IDX=@UD VALID=?]))
      ::  CEY: CERTIFICATE KEY XX MOVE?
      ::
      CEY=KEY:RSA
  ==
--
::
::::  ACME APP
::
::  DIRECTORY-BASE: LETSENCRYPT SERVICE DIRECTORY URL
::
=/  DIRECTORY-BASE=PURL
  =-  (NEED (DE-PURL:HTML -))
  'HTTPS://ACME-V02.API.LETSENCRYPT.ORG/DIRECTORY'
::  MOV: LIST OF OUTGOING MOVES FOR THE CURRENT TRANSACTION
::
=|  MOV=(LIST MOVE)
::
|_  [BOW=BOWL:GALL ACME]
::  +THIS: SELF
::
::    XX SHOULD BE A +* CORE ALIAS, SEE URBIT/ARVO#712
::
++  THIS  .
::  +EMIT: EMIT A MOVE
::
++  EMIT
  |=  CAR=CARD
  THIS(MOV [[OST.BOW CAR] MOV])
::  +ABET: FINALIZE TRANSACTION
::
++  ABET
  ^-  (QUIP MOVE _THIS)
  [(FLOP MOV) THIS(MOV ~)]
::  +BACKOFF: CALCULATE EXPONENTIAL BACKOFF
::
++  BACKOFF
  |=  TRY=@UD
  ^-  @DR
  ?:  =(0 TRY)  ~S0
  %+  ADD
    (MUL ~S1 (BEX (DEC TRY)))
  (MUL ~S0..0001 (~(RAD OG ENY.BOW) 1.000))
::  +ACME-WIRE: CREATE :ACME HTTP-REQUEST WIRE
::
++  ACME-WIRE
  |=  [TRY=@UD ACT=@TAS =WIRE]
  ^-  ^WIRE
  (WELD /ACME/TRY/(SCOT %UD TRY)/[ACT] WIRE)
::  +NOTIFY: SEND :HALL NOTIFICATION
::
++  NOTIFY
  |=  [=CORD =TANG]
  ^-  CARD
  =/  MSG=SPEECH:HALL
    :+  %APP  DAP.BOW
    =/  LINE  [%LIN & CORD]
    ?~(TANG LINE [%FAT [%TANK TANG] LINE])
  =/  ACT
    [%PHRASE (SY [OUR.BOW %INBOX] ~) [MSG ~]]
  [%POKE / [OUR.BOW %HALL] %HALL-ACTION ACT]
::  +REQUEST: UNAUTHENTICATED HTTP REQUEST
::
++  REQUEST
  |=  [WIR=WIRE REQ=HISS]
  ^-  CARD
  [%HISS WIR ~ %HTTR %HISS REQ]
::  +SIGNED-REQUEST: JWS JSON POST
::
++  SIGNED-REQUEST
  |=  [URL=PURL NON=@T BOD=JSON]
  ^-  HISS
  :^  URL  %POST
    (MY CONTENT-TYPE+['APPLICATION/JOSE+JSON' ~] ~)
  :-  ~
  ^-  OCTS
  =;  PRO=JSON
    (AS-OCTT:MIMES:HTML (EN-JSON:HTML (SIGN:JWS KEY.ACT PRO BOD)))
  :-  %O  %-  MY  :~
    NONCE+S+NON
    URL+S+(CRIP (EN-PURL:HTML URL))
    ?^  REG.ACT
      KID+S+KID.U.REG.ACT
    JWK+(PASS:EN:JWK KEY.ACT)
  ==
::  +STATEFUL-REQUEST: EMIT SIGNED, NONCE'D REQUEST
::
++  STATEFUL-REQUEST
  |=  [[TRY=@UD ACT=@TAS =WIRE] =PURL =JSON]
  ^+  THIS
  ?~  NONCES
    (NONCE:EFFECT [ACT WIRE])
  %-  EMIT(NONCES T.NONCES)
  %+  REQUEST  (ACME-WIRE TRY ACT WIRE)
  (SIGNED-REQUEST PURL I.NONCES JSON)
::  +BAD-NONCE: CHECK IF AN HTTP RESPONSE IS A BADNONCE ERROR
::
++  BAD-NONCE
  |=  REP=HTTR
  ^-  ?
  ::  XX ALWAYS 400?
  ::
  ?.  =(400 P.REP)  |
  ?~  R.REP  |
  =/  JON=(UNIT JSON)  (DE-JSON:HTML Q.U.R.REP)
  ?~  JON  |
  =('URN:IETF:PARAMS:ACME:ERROR:BADNONCE' TYPE:(ERROR:GRAB U.JON))
::  +RATE-LIMITED: HANDLE ACME SERVICE RATE-LIMITS
::
++  RATE-LIMITED
  |=  [TRY=@UD ACT=@TAS SPUR=WIRE BOD=(UNIT OCTS)]
  ^+  THIS
  =/  JON=(UNIT JSON)
    ?~(BOD ~ (DE-JSON:HTML Q.U.BOD))
  ?~  JON
    ::  NO DETAILS, BACK WAY OFF
    ::  XX SPECIFICALLY BASED ON WIRE
    ::
    (RETRY:EFFECT TRY ACT SPUR (MIN ~D1 (BACKOFF (ADD 10 TRY))))
  =/  ERR  (ERROR:GRAB U.JON)
  ?.  =('PARAMS:ACME:ERROR:RATELIMITED' TYPE.ERR)
    ::  INCORRECT 429 STATUS? BACKOFF NORMALLY
    ::
    (RETRY:EFFECT TRY ACT SPUR (MIN ~H1 (BACKOFF TRY)))

  =/  DETAIL  (TRIP DETAIL.ERR)
  ::  TOO MANY CERTIFICATES FOR THESE DOMAINS
  ::
  ?:  ?=(^ (FIND "ALREADY ISSUED FOR EXACT" DETAIL))
    =.  ..THIS  (RETRY:EFFECT TRY ACT SPUR ~D7)
    =/  MSG=CORD
      %+  RAP  3
      :~  'RATE LIMIT EXCEEDED: '
          ' TOO MANY CERTIFICATES ISSUED FOR '
          ?~  ROD
            ::  XX SHOULDN'T HAPPEN
            ::
            (JOIN '.' /NETWORK/ARVO/(CRIP +:(SCOW %P OUR.BOW)))
          (JOIN ', ' (TURN ~(TAP IN DOM.U.ROD) |=(A=TURF (JOIN '.' A))))
          '. RETRYING IN ~D7.'
      ==
    (EMIT (NOTIFY MSG ~))
  ::  TOO MANY CERTIFICATES FOR TOP-LEVEL-DOMAIN
  ::
  ?:  ?=(^ (FIND "TOO MANY CERTIFICATES ALREADY" DETAIL))
    =.  ..THIS  (RETRY:EFFECT TRY ACT SPUR ~D7)
    =/  LUL=@DR
      (ADD ~D7 (MUL ~M1 (~(RAD OG ENY.BOW) (BEX 10))))
    =/  MSG=CORD
      %+  RAP  3
      :~  'RATE LIMIT EXCEEDED: '
          ' TOO MANY CERTIFICATES ISSUED FOR '
          ::  XX GET FROM DETAIL
          ::
          (JOIN '.' /NETWORK/ARVO)
          '. RETRYING IN '
          (SCOT %DR LUL)  '.'
      ==
    (EMIT (NOTIFY MSG ~))
  ::  XX MATCH MORE RATE-LIMIT CONDITIONS
  ::  OR BACKOFF BY WIRE
  ::
  ::    - "TOO MANY REGISTRATIONS FOR THIS IP"
  ::    - "TOO MANY REGISTRATIONS FOR THIS IP RANGE"
  ::    - "TOO MANY CURRENTLY PENDING AUTHORIZATIONS"
  ::    - "TOO MANY FAILED AUTHORIZATIONS RECENTLY"
  ::    - "TOO MANY NEW ORDERS RECENTLY"
  ::
  (RETRY:EFFECT TRY ACT SPUR (MIN ~D1 (BACKOFF (ADD 10 TRY))))
::  +FAILURE-MESSAGE: GENERIC HTTP FAILURE MESSAGE
::
++  FAILURE-MESSAGE
  |=  =PURL
  ^-  CORD
  %+  RAP  3
  :~  'UNABLE TO REACH '
      (CRIP (EN-PURL:HTML PURL))  '. '
      'PLEASE CONFIRM YOUR URBIT HAS NETWORK CONNECTIVITY.'
  ==
::  |EFFECT: SEND MOVES TO ADVANCE
::
++  EFFECT
  |_  TRY-COUNT=(UNIT @UD)
  ::  +TRY: THIS EFFECT ATTEMPT NUMBER
  ::
  ++  TRY  (FALL TRY-COUNT 1)
  ::  +VALIDATE-DOMAIN: CONFIRM THAT A PENDING DOMAIN RESOLVES TO US
  ::
  ++  VALIDATE-DOMAIN
    |=  IDX=@UD
    ^+  THIS
    ~|  %VALIDATE-DOMAIN-EFFECT-FAIL
    ?.  ?=(^ NEXT-ORDER)  ~|(%NO-NEXT-ORDER !!)
    =/  PENDING
      (SKIP ~(TAP BY U.NEXT-ORDER) |=([TURF @UD VALID=?] VALID))
    ?:  =(~ PENDING)
      NEW-ORDER:EFFECT
    =/  NEXT=[=TURF IDX=@UD VALID=?]
      ~|  [%NO-NEXT-DOMAIN IDX=IDX]
      (HEAD (SKIM PENDING |=([TURF IDX=@UD ?] =(IDX ^IDX))))
    ::  XX SHOULD CONFIRM THAT :TURF POINTS TO US
    ::  CONFIRMS THAT DOMAIN EXISTS (AND AN URBIT IS ON :80)
    ::
    =/  =PURL
        :-  [SEC=| POR=~ HOST=[%& TURF.NEXT]]
        [[EXT=`~.UDON PATH=/STATIC] QUERY=~]
    =/  =WIRE
      (ACME-WIRE TRY %VALIDATE-DOMAIN /IDX/(SCOT %UD IDX.NEXT))
    (EMIT (REQUEST WIRE PURL %GET ~ ~))
  ::  +DIRECTORY: GET ACME SERVICE DIRECTORY
  ::
  ++  DIRECTORY
    ^+  THIS
    ::  XX NOW IN WIRE?
    ::
    (EMIT (REQUEST (ACME-WIRE TRY %DIRECTORY /) DIRECTORY-BASE %GET ~ ~))
  ::  +NONCE: GET A NEW NONCE FOR THE NEXT REQUEST
  ::
  ++  NONCE
    |=  NEX=WIRE
    ~|  [%BAD-NONCE-NEXT NEX]
    ?>  ?&  ?=(^ NEX)
            ?=(NONCE-NEXT I.NEX)
        ==
    ^+  THIS
    ::  XX NOW IN WIRE?
    ::
    =/  =WIRE
       (ACME-WIRE TRY %NONCE [%NEXT NEX])
    (EMIT (REQUEST WIRE NONCE.DIR %GET ~ ~))
  ::  +REGISTER: CREATE ACME SERVICE ACCOUNT
  ::
  ::    NOTE: ACCEPTS SERVICES TOS.
  ::    XX ADD REKEY MECHANISM
  ::
  ++  REGISTER
    ^+  THIS
    ?.  =(~ REG.ACT)
      ?:  =(~ NEXT-ORDER)
        THIS
      (VALIDATE-DOMAIN:EFFECT 0)
    =/  =JSON  [%O (MY [['TERMSOFSERVICEAGREED' B+&] ~])]
    ::  XX DATE IN WIRE?
    ::
    =/  WIRE-PARAMS  [TRY %REGISTER /]
    (STATEFUL-REQUEST WIRE-PARAMS REGISTER.DIR JSON)
  ::  +RENEW: RENEW CERTIFICATE
  ::
  ++  RENEW
    ^+  THIS
    ~|  %RENEW-EFFECT-FAIL
    ?.  ?=(^ REG.ACT)  ~|(%NO-ACCOUNT !!)
    ?.  ?=(^ LIV)      ~|(%NO-LIVE-CONFIG !!)
    =<  NEW-ORDER:EFFECT
    (QUEUE-NEXT-ORDER & DOM.U.LIV)
  ::  +NEW-ORDER: CREATE A NEW CERTIFICATE ORDER
  ::
  ++  NEW-ORDER
    ^+  THIS
    ~|  %NEW-ORDER-EFFECT-FAIL
    ?.  ?=(^ REG.ACT)  ~|(%NO-ACCOUNT !!)
    ?.  ?=([~ ^] NEXT-ORDER)  ~|(%NO-DOMAINS !!)
    =/  =JSON
      :-  %O  %-  MY  :~
        :-  %IDENTIFIERS
        :-  %A
        %+  TURN
          ~(TAP IN ~(KEY BY `(MAP TURF *)`U.NEXT-ORDER))
        |=(A=TURF [%O (MY TYPE+S+'DNS' VALUE+S+(JOIN '.' A) ~)])
      ==
    =/  WIRE-PARAMS  [TRY %NEW-ORDER /(SCOT %DA NOW.BOW)]
    (STATEFUL-REQUEST WIRE-PARAMS NEW-ORDER.DIR JSON)
  ::  +CANCEL-ORDER: CANCEL FAILED ORDER, SET RETRY TIMER
  ::
  ++  CANCEL-ORDER
    ^+  THIS
    ~|  %CANCEL-ORDER-EFFECT-FAIL
    :: ?>  ?=(^ ROD)
    ::  XX GET FAILURE REASON
    ::
    =/  TRY=@UD  ?~(ROD 1 TRY.U.ROD)
    ::  BACKOFF FASTER THAN USUAL
    ::
    =/  LUL=@DR  (MIN ~H1 (BACKOFF (ADD 4 TRY)))
    =/  MSG=CORD
      (CAT 3 'RETRYING CERTIFICATE REQUEST IN ' (SCOT %DR LUL))
    =.  ..THIS  (EMIT (NOTIFY MSG ~))
    =.  ..THIS  (RETRY:EFFECT TRY %NEW-ORDER / LUL)
    ::  DOMAINS MIGHT ALREADY BE VALIDATED
    ::
    =.  ..THIS  (QUEUE-NEXT-ORDER & ?>(?=(^ ROD) DOM.U.ROD))
    CANCEL-CURRENT-ORDER
  ::  +FINALIZE-ORDER: FINALIZE COMPLETED ORDER
  ::
  ++  FINALIZE-ORDER
    ^+  THIS
    ~|  %FINALIZE-ORDER-EFFECT-FAIL
    ?.  ?=(^ REG.ACT)  ~|(%NO-ACCOUNT !!)
    ?.  ?=(^ ROD)      ~|(%NO-ACTIVE-ORDER !!)
    ?.  ?=(~ PENDING.AUT.U.ROD)  ~|(%PENDING-AUTHZ !!)
    ?.  ?=(~ ACTIVE.AUT.U.ROD)   ~|(%ACTIVE-AUTHZ !!)
    ::  XX REVISIT WRT RATE LIMITS
    ::
    ?>  ?=(%WAKE SAS.U.ROD)
    =/  =JSON
      [%O (MY CSR+S+(EN-BASE64URL (MET 3 CSR.U.ROD) `@`CSR.U.ROD) ~)]
    =/  WIRE-PARAMS  [TRY %FINALIZE-ORDER /(SCOT %DA NOW.BOW)]
    (STATEFUL-REQUEST WIRE-PARAMS FIN.U.ROD JSON)
  ::  +CHECK-ORDER: CHECK COMPLETED ORDER FOR CERTIFICATE AVAILABILITY
  ::
  ++  CHECK-ORDER
    ^+  THIS
    ~|  %CHECK-ORDER-EFFECT-FAIL
    ?.  ?=(^ REG.ACT)  ~|(%NO-ACCOUNT !!)
    ?.  ?=(^ ROD)      ~|(%NO-ACTIVE-ORDER !!)
    ?.  ?=(~ PENDING.AUT.U.ROD)  ~|(%PENDING-AUTHZ !!)
    ?.  ?=(~ ACTIVE.AUT.U.ROD)   ~|(%ACTIVE-AUTHZ !!)
    ::  XX REVISIT WRT RATE LIMITS
    ::
    ?>  ?=(%WAKE SAS.U.ROD)
    =/  =WIRE
       (ACME-WIRE TRY %CHECK-ORDER /(SCOT %DA NOW.BOW))
    (EMIT (REQUEST WIRE EGO.U.ROD %GET ~ ~))
  ::  +CERTIFICATE: DOWNLOAD PEM-ENCODED CERTIFICATE
  ::
  ++  CERTIFICATE
    |=  URL=PURL
    ^+  THIS
    ~|  %CERTIFICATE-EFFECT-FAIL
    ?.  ?=(^ REG.ACT)  ~|(%NO-ACCOUNT !!)
    ?.  ?=(^ ROD)      ~|(%NO-ACTIVE-ORDER !!)
    =/  HED  (MY ACCEPT+['APPLICATE/X-PEM-FILE' ~] ~)
    =/  =WIRE
       (ACME-WIRE TRY %CERTIFICATE /(SCOT %DA NOW.BOW))
    (EMIT (REQUEST WIRE URL %GET HED ~))
  ::  +INSTALL: TELL %EYRE ABOUT OUR CERTIFICATE
  ::
  ++  INSTALL
    ^+  THIS
    ~|  %INSTALL-EFFECT-FAIL
    ?>  ?=(^ LIV)
    =/  KEY=WAIN  (RING:EN:PEM:PKCS8 KEY.U.LIV)
    (EMIT %RULE /INSTALL %CERT `[KEY `WAIN`CER.U.LIV])
  ::  +GET-AUTHZ: GET NEXT ACME SERVICE DOMAIN AUTHORIZATION OBJECT
  ::
  ++  GET-AUTHZ
    ^+  THIS
    ~|  %GET-AUTHZ-EFFECT-FAIL
    ?.  ?=(^ REG.ACT)  ~|(%NO-ACCOUNT !!)
    ?.  ?=(^ ROD)      ~|(%NO-ACTIVE-ORDER !!)
    ?.  ?=(^ PENDING.AUT.U.ROD)  ~|(%NO-PENDING-AUTHZ !!)
    ::  XX REVISIT WRT RATE LIMITS
    ::
    ?>  ?=(%WAKE SAS.U.ROD)
    =/  =WIRE
      (ACME-WIRE TRY %GET-AUTHZ /(SCOT %DA NOW.BOW))
    (EMIT (REQUEST WIRE I.PENDING.AUT.U.ROD %GET ~ ~))
  ::  XX CHECK/FINALIZE-AUTHZ ??
  ::
  ::  +SAVE-TRIAL: SAVE ACME DOMAIN VALIDATION CHALLENGE TO /.WELL-KNOWN/
  ::
  ++  SAVE-TRIAL
    ^+  THIS
    ~|  %SAVE-TRIAL-EFFECT-FAIL
    ?.  ?=(^ REG.ACT)  ~|(%NO-ACCOUNT !!)
    ?.  ?=(^ ROD)      ~|(%NO-ACTIVE-ORDER !!)
    ?.  ?=(^ ACTIVE.AUT.U.ROD)  ~|(%NO-ACTIVE-AUTHZ !!)
    ::  XX REVISIT WRT RATE LIMITS
    ::
    ?>  ?=(%WAKE SAS.U.ROD)
    =*  AUT  U.ACTIVE.AUT.U.ROD
    %-  EMIT
    :^    %WELL
        ::  XX IDX IN WIRE?
        ::
        /ACME/SAVE-TRIAL/(SCOT %DA NOW.BOW)
      /ACME-CHALLENGE/[TOK.CAL.AUT]
    :+  ~
      /TEXT/PLAIN
    %-  AS-OCTS:MIMES:HTML
    (RAP 3 [TOK.CAL.AUT '.' (PASS:THUMB:JWK KEY.ACT) ~])
  ::  +TEST-TRIAL: CONFIRM THAT ACME DOMAIN VALIDATION CHALLENGE IS AVAILABLE
  ::
  ++  TEST-TRIAL
    ^+  THIS
    ~|  %TEST-TRIAL-EFFECT-FAIL
    ?.  ?=(^ REG.ACT)  ~|(%NO-ACCOUNT !!)
    ?.  ?=(^ ROD)      ~|(%NO-ACTIVE-ORDER !!)
    ?.  ?=(^ ACTIVE.AUT.U.ROD)  ~|(%NO-ACTIVE-AUTHZ !!)
    ::  XX REVISIT WRT RATE LIMITS
    ::
    ?>  ?=(%WAKE SAS.U.ROD)
    =*  AUT  U.ACTIVE.AUT.U.ROD
    =/  PAT=PATH  /'.WELL-KNOWN'/ACME-CHALLENGE/[TOK.CAL.AUT]
    ::  NOTE: REQUIRES PORT 80, JUST AS THE ACME SERVICE WILL
    ::
    =/  URL=PURL  [[SEC=| POR=~ HOS=[%& DOM.AUT]] [EXT=~ PAT] HED=~]
    ::  =/  URL=PURL  [[SEC=| POR=`8.081 HOS=[%& /LOCALHOST]] [EXT=~ PAT] HED=~]
    ::  XX IDX IN WIRE?
    ::
    =/  =WIRE
      (ACME-WIRE TRY %TEST-TRIAL /(SCOT %DA NOW.BOW))
    (EMIT (REQUEST WIRE URL %GET ~ ~))
  ::  +FINALIZE-TRIAL: NOTIFY ACME SERVICE THAT CHALLENGE IS READY
  ::
  ++  FINALIZE-TRIAL
    ^+  THIS
    ~|  %FINALIZE-TRIAL-EFFECT-FAIL
    ?.  ?=(^ REG.ACT)  ~|(%NO-ACCOUNT !!)
    ?.  ?=(^ ROD)      ~|(%NO-ACTIVE-ORDER !!)
    ?.  ?=(^ ACTIVE.AUT.U.ROD)  ~|(%NO-ACTIVE-AUTHZ !!)
    ::  XX REVISIT WRT RATE LIMITS
    ::
    ?>  ?=(%WAKE SAS.U.ROD)
    =*  AUT  U.ACTIVE.AUT.U.ROD
    ::  EMPTY OBJECT INCLUDED FOR SIGNATURE
    ::  XX INCLUDE INDEX IN WIRE?
    ::
    =/  WIRE-PARAMS  [TRY %FINALIZE-TRIAL /(SCOT %DA NOW.BOW)]
    (STATEFUL-REQUEST WIRE-PARAMS EGO.CAL.AUT [%O ~])
  ::  XX DELETE-TRIAL?
  ::
  ::  +RETRY: RETRY EFFECT AFTER TIMEOUT
  ::
  ++  RETRY
    |=  [TRY=@UD ACT=@TAS =WIRE LULL=@DR]
    ::  XX VALIDATE WIRE
    ::
    (EMIT %WAIT (ACME-WIRE +(TRY) ACT WIRE) (ADD NOW.BOW LULL))
  --
::  |EVENT: ACCEPT EVENT, EMIT NEXT EFFECT(S)
::
::    XX SHOULD THESE NEXT EFFECTS BE TRIGGERED AT CALL SITES INSTEAD?
::
++  EVENT
  |_  TRY=@UD
  ::  +VALIDATE-DOMAIN: ACCEPT A PENDING DOMAIN CONFIRMATION RESPONSE
  ::
  ++  VALIDATE-DOMAIN
    |=  [=WIRE REP=HTTR]
    ^+  THIS
    ?>  ?=([%IDX @ *] WIRE)
    ?.  ?=(^ NEXT-ORDER)
      THIS
    =/  IDX  (SLAV %UD I.T.WIRE)
    =/  VALID  =(200 P.REP)
    =/  ITEM=(LIST [=TURF IDX=@UD VALID=?])
      (SKIM ~(TAP BY U.NEXT-ORDER) |=([TURF IDX=@UD ?] =(^IDX IDX)))
    ?.  ?&  ?=([^ ~] ITEM)
            !VALID.I.ITEM
        ==
      THIS
    =.  U.NEXT-ORDER
      (~(PUT BY U.NEXT-ORDER) TURF.I.ITEM [IDX VALID])
    ?.  VALID
      ?:  (LTH TRY 10)
        =/  LUL=@DR  (MIN ~H1 (BACKOFF TRY))
        (RETRY:EFFECT TRY %VALIDATE-DOMAIN /IDX/(SCOT %UD IDX) LUL)
      ::  XX REMOVE NEXT-ORDER, CANCEL PENDING REQUESTS
      ::  XX INCLUDE SUGGESTION TO FIX
      ::
      =/  MSG=CORD
        %+  RAP  3
        :~  'UNABLE TO REACH '  (SCOT %P OUR.BOW)
            ' VIA HTTP AT '  (JOIN '.' TURF.I.ITEM)  ':80'
        ==
      (EMIT(NEXT-ORDER ~) (NOTIFY MSG [(SELL !>(REP)) ~]))
    ?:  ?=(~ (SKIP ~(VAL BY U.NEXT-ORDER) |=([@UD VALID=?] VALID)))
      NEW-ORDER:EFFECT
    (VALIDATE-DOMAIN:EFFECT +(IDX))
  ::  +DIRECTORY: ACCEPT ACME SERVICE DIRECTORY, TRIGGER REGISTRATION
  ::
  ++  DIRECTORY
    |=  [WIR=WIRE REP=HTTR]
    ^+  THIS
    ?.  =(200 P.REP)
      ?:  (LTH TRY 10)
        (RETRY:EFFECT TRY %DIRECTORY / (MIN ~M30 (BACKOFF TRY)))
      (EMIT (NOTIFY (FAILURE-MESSAGE DIRECTORY-BASE) [(SELL !>(REP)) ~]))
    =.  DIR  (DIRECTORY:GRAB (NEED (DE-JSON:HTML Q:(NEED R.REP))))
    ?~(REG.ACT REGISTER:EFFECT THIS)
  ::  +NONCE: ACCEPT NEW NONCE AND TRIGGER NEXT EFFECT
  ::
  ::    NONCE HAS ALREADY BEEN SAVED IN +SIGH-HTTR. THE NEXT EFFECT
  ::    IS SPECIFIED IN THE WIRE.
  ::
  ++  NONCE
    |=  [=WIRE REP=HTTR]
    ^+  THIS
    ~|  [%UNRECOGNIZED-NONCE-WIRE WIRE]
    ?>  &(?=(^ WIRE) ?=([%NEXT ^] WIRE))
    =*  NEX  I.T.WIRE
    ~|  [%UNKNOWN-NONCE-NEXT NEX]
    ?>  ?=(NONCE-NEXT NEX)
    ?.  =(204 P.REP)
      ?:  (LTH TRY 10)
        (RETRY:EFFECT TRY %NONCE T.WIRE (MIN ~M30 (BACKOFF TRY)))
      (EMIT (NOTIFY (FAILURE-MESSAGE NONCE.DIR) [(SELL !>(REP)) ~]))
    ?-  NEX
      %REGISTER        REGISTER:EFFECT
      %NEW-ORDER       NEW-ORDER:EFFECT
      %FINALIZE-ORDER  FINALIZE-ORDER:EFFECT
      %FINALIZE-TRIAL  FINALIZE-TRIAL:EFFECT
    ==
  ::  +REGISTER: ACCEPT ACME SERVICE REGISTRATION
  ::
  ++  REGISTER
    |=  [WIR=WIRE REP=HTTR]
    ^+  THIS
    ?.  |(=(200 P.REP) =(201 P.REP))
      ::  XX POSSIBLE 204?
      ::
      ?:  (LTH TRY 10)
        (RETRY:EFFECT TRY %REGISTER / (MIN ~H1 (BACKOFF TRY)))
      (EMIT (NOTIFY (FAILURE-MESSAGE REGISTER.DIR) [(SELL !>(REP)) ~]))
    =/  LOC=@T
      Q:(HEAD (SKIM Q.REP |=((PAIR @T @T) ?=(%LOCATION P))))
    ::  XX @DA ONCE PARSER IS FIXED
    ::
    =/  WEN=@T
      ?~  R.REP
        (SCOT %DA NOW.BOW)
      =/  BOD=ACCT:BODY
        (ACCT:GRAB (NEED (DE-JSON:HTML Q.U.R.REP)))
      ?>  ?=(%VALID SAS.BOD)
      WEN.BOD
    =.  REG.ACT  `[WEN LOC]
    ?:  =(~ NEXT-ORDER)
      THIS
    (VALIDATE-DOMAIN:EFFECT 0)
  ::  XX REKEY
  ::
  ::  +NEW-ORDER: ORDER CREATED, BEGIN PROCESSING AUTHORIZATIONS
  ::
  ++  NEW-ORDER
    |=  [WIR=WIRE REP=HTTR]
    ^+  THIS
    ?.  =(201 P.REP)
      ::  XX POSSIBLE 204?
      ::
      ?:  (LTH TRY 10)
        (RETRY:EFFECT TRY %NEW-ORDER / (MIN ~H1 (BACKOFF TRY)))
      ::  XX NEXT STEPS, RETRYING IN ??
      ::
      (EMIT (NOTIFY (FAILURE-MESSAGE REGISTER.DIR) [(SELL !>(REP)) ~]))
    ?>  ?=(^ NEXT-ORDER)
    =/  LOC=@T
      Q:(HEAD (SKIM Q.REP |=((PAIR @T @T) ?=(%LOCATION P))))
    =/  EGO=PURL  (NEED (DE-PURL:HTML LOC))
    ::  XX PARSE IDENTIFIERS, CONFIRM EQUAL TO PENDING DOMAINS
    ::  XX CHECK STATUS
    ::
    =/  BOD=ORDER:BODY
      (ORDER:GRAB (NEED (DE-JSON:HTML Q:(NEED R.REP))))
    =/  DOM=(SET TURF)  ~(KEY BY U.NEXT-ORDER)
    ::  XX MAYBE GENERATE KEY HERE?
    ::
    =/  CSR=@UX  +:(EN:DER:PKCS10 CEY ~(TAP IN DOM))
    =/  DOR=ORDER
      [DOM TRY=1 SAS=%WAKE EXP.BOD EGO (NEED FIN.BOD) CEY CSR [AUT.BOD ~ ~]]
    GET-AUTHZ:EFFECT(ROD `DOR, NEXT-ORDER ~)
  ::  +FINALIZE-ORDER: ORDER FINALIZED, POLL FOR CERTIFICATE
  ::
  ++  FINALIZE-ORDER
    |=  [WIR=WIRE REP=HTTR]
    ^+  THIS
    ?:  =(504 P.REP)
      ::  RETRY TIMEOUTS FREQUENTLY
      ::
      (RETRY:EFFECT TRY %FINALIZE-ORDER / (MIN ~M10 (BACKOFF TRY)))
    ::  CHECK-ORDER REGARDLESS OF STATUS CODE
    ::
    CHECK-ORDER:EFFECT
  ::  +CHECK-ORDER: CHECK ORDER STATUS, DISPATCH APPROPRIATELY
  ::
  ++  CHECK-ORDER
    |=  [WIR=WIRE REP=HTTR]
    ^+  THIS
    ~|  [%STRANGE-CHECK-ORDER WIR]
    ?>  ?=(^ ROD)
    ?.  =(200 P.REP)
      ?:  (LTH TRY 10)
        (RETRY:EFFECT TRY %CHECK-ORDER / (MIN ~M10 (BACKOFF TRY)))
      ::  XX NEXT STEPS, RETRYING IN, DELETE ORDER ??
      ::
      (EMIT (NOTIFY (FAILURE-MESSAGE EGO.U.ROD) [(SELL !>(REP)) ~]))
    =/  BOD=ORDER:BODY
      (ORDER:GRAB (NEED (DE-JSON:HTML Q:(NEED R.REP))))
    ?+  SAS.BOD
      ~&  [%CHECK-ORDER-STATUS-UNKNOWN SAS.BOD]
      THIS
    ::  ORDER FAILED (AT ANY STAGE)
    ::
        %INVALID
      ~&  [%CHECK-ORDER-FAIL %INVALID WIR REP]
      ::  XX CHECK AUTHZ, GET THE FAILURE REASON
      ::  XX POSSIBLE TO RETRY ANY REASONS?
      ::
      =<  CANCEL-ORDER:EFFECT
      (EMIT (NOTIFY 'CERTIFICATE ORDER FAILED' [(SELL !>(REP)) ~]))
    ::  INITIAL ORDER STATE
    ::
        %PENDING
      CHECK-ORDER:EFFECT
    ::  VALIDATIONS COMPLETED
    ::
        %READY
      FINALIZE-ORDER:EFFECT
    ::  FINALIZATION REQUESTED
    ::
        %PROCESSING
      CHECK-ORDER:EFFECT
    ::  CERTIFICATE ISSUED
    ::
        %VALID
      ::  XX UPDATE ORDER STATE
      ::  XX =< DELETE-TRIAL
      ::
      ~|  IMPOSSIBLE-ORDER+[WIR REP BOD]
      (CERTIFICATE:EFFECT (NEED CER.BOD))
    ==
  ::
  ::  +CERTIFICATE: ACCEPT PEM-ENCODED CERTIFICATE
  ::
  ++  CERTIFICATE
    |=  [WIR=WIRE REP=HTTR]
    ^+  THIS
    ~|  [%STRANGE-CERTIFICATE-RESPONSE WIR]
    ?>  ?=(^ ROD)
    ?.  =(200 P.REP)
      ::  WILL RE-ATTEMPT CERTIFICATE DOWNLOAD PER ORDER STATUS
      ::
      ?:  (LTH TRY 10)
        (RETRY:EFFECT TRY %CHECK-ORDER / (MIN ~M10 (BACKOFF TRY)))
      ::  XX NEXT STEPS, RETRYING IN, GET URL SOMEHOW ??
      ::
      =/  MSG=CORD
        %+  RAP  3
        :~  'UNABLE TO DOWNLOAD CERTIFICATE. '
            'PLEASE CONFIRM THAT YOUR URBIT HAS NETWORK CONNECTIVITY.'
        ==
      (EMIT (NOTIFY MSG [(SELL !>(REP)) ~]))
    =/  CER=WAIN  (TO-WAIN:FORMAT Q:(NEED R.REP))
    =/  FIG=CONFIG
      ::  XX EXPIRATION DATE
      ::
      [DOM.U.ROD KEY.U.ROD CER (ADD NOW.BOW ~D90) EGO.U.ROD]
    ::  ARCHIVE LIVE CONFIG
    ::
    =?  FIG.HIT  ?=(^ LIV)  [U.LIV FIG.HIT]
    ::  SAVE NEW LIVE CONFIG, CLEAR ACTIVE ORDER
    ::
    =>  .(LIV (SOME FIG), ROD ~)
    ?>  ?=(^ LIV)
    ::  NOTIFY :HALL
    ::
    =>  =/  MSG=CORD
          %+  RAP  3
          :~  'RECEIVED HTTPS CERTIFICATE FOR '
              (JOIN ', ' (TURN ~(TAP IN DOM.U.LIV) |=(A=TURF (JOIN '.' A))))
          ==
        (EMIT (NOTIFY MSG ~))
    ::  SET RENEWAL TIMER, INSTALL CERTIFICATE IN %EYRE
    ::
    ::    CERTIFICATES EXPIRE AFTER ~D90. WE WANT TIME FOR RETRIES AND
    ::    TO WORK AROUND RATE LIMITS, SO OUR RENEWAL TIMER IS FOR ~D60.
    ::    RENEWALS COUNT TOWARDS WEEKLY RATE LIMITS, BUT ARE ALLOWED TO
    ::    CONTINUE PAST RATE LIMITS, SO FUDGE THE TIMER TOWARDS THE END
    ::    OF THE WEEK NEAREST ~D60.
    ::
    =<  INSTALL:EFFECT
    =;  LUL=@DR
      (RETRY:EFFECT 0 %RENEW / LUL)
    %+  ADD
      (MUL ~M1 (~(RAD OG ENY.BOW) (BEX 8)))
    =/  WEEKDAY  (DAWS:CHRONO:USERLIB (YORE NOW.BOW))
    ?:  (GTH WEEKDAY 4)
      (SUB ~D60 (MUL ~D1 (SUB WEEKDAY 4)))
    (ADD ~D60 (MUL ~D1 (SUB 4 WEEKDAY)))
  ::  +GET-AUTHZ: ACCEPT ACME SERVICE AUTHORIZATION OBJECT
  ::
  ++  GET-AUTHZ
    |=  [WIR=WIRE REP=HTTR]
    ^+  THIS
    ~|  [%STRANGE-AUTHORIZATION WIR]
    ?>  ?=(^ ROD)
    ?>  ?=(^ PENDING.AUT.U.ROD)
    ?.  =(200 P.REP)
      ?:  (LTH TRY 10)
        (RETRY:EFFECT TRY %GET-AUTHZ / (MIN ~M10 (BACKOFF TRY)))
      ::  XX NEXT STEPS, RETRYING IN ??
      ::
      (EMIT (NOTIFY (FAILURE-MESSAGE I.PENDING.AUT.U.ROD) [(SELL !>(REP)) ~]))
    =/  BOD=AUTH:BODY
      (AUTH:GRAB (NEED (DE-JSON:HTML Q:(NEED R.REP))))
    =/  CAL=TRIAL
       ::  XX PARSE TOKEN TO VERIFY URL-SAFE BASE64?
       ::
      [%HTTP URL.CAL.BOD TOK.CAL.BOD %RECV]
    ::  XX CHECK THAT URLS ARE THE SAME
    ::
   =/  TAU=AUTH  [I.PENDING.AUT.U.ROD DOM.BOD CAL]
    ::  XX GET IDX FROM WIRE INSTEAD?
    ::
    =/  IDX=@UD  +((LENT DONE.AUT.U.ROD))
    =/  ROD-AUT=ORDER-AUTH
      %=  AUT.U.ROD
        PENDING  T.PENDING.AUT.U.ROD
        ACTIVE   `[IDX TAU]
      ==
    =<  TEST-TRIAL:EFFECT
    SAVE-TRIAL:EFFECT(AUT.U.ROD ROD-AUT)
  ::  XX CHECK/FINALIZE-AUTHZ ??
  ::
  ::  +TEST-TRIAL: ACCEPT RESPONSE FROM CHALLENGE TEST
  ::
  ::    NOTE THAT +SAVE-TRIAL:EFFECT HAS NO CORRESPONDING EVENT.
  ::
  ++  TEST-TRIAL
    |=  [WIR=WIRE REP=HTTR]
    ~|  [%STRANGE-TEST-TRIAL WIR]
    ?>  ?=(^ ROD)
    ?>  ?=(^ ACTIVE.AUT.U.ROD)
    =*  AUT  U.ACTIVE.AUT.U.ROD
    ^+  THIS
    ?.  =(200 P.REP)
      ?:  (LTH TRY 10)
        (RETRY:EFFECT TRY %TEST-TRIAL / (MIN ~M10 (BACKOFF TRY)))
      ::  XX NEXT STEPS, CHECK CONNECTIVITY, ETC. ??
      ::
      =<  CANCEL-ORDER:EFFECT
      =/  MSG=CORD
        %+  RAP  3
        :~  'UNABLE TO RETRIEVE SELF-HOSTED DOMAIN VALIDATION TOKEN '
            'VIA '  (JOIN '.' DOM.AUT)  '. '
            'PLEASE CONFIRM YOUR URBIT HAS NETWORK CONNECTIVITY.'
        ==
      (EMIT (NOTIFY MSG [(SELL !>(REP)) ~]))
    =/  BOD
      %-  AS-OCTS:MIMES:HTML
      (RAP 3 [TOK.CAL.AUT '.' (PASS:THUMB:JWK KEY.ACT) ~])
    ?.  ?&  ?=(^ R.REP)
            =(BOD U.R.REP)
        ==
      ::  XX SAVE-TRIAL AGAIN?
      ::  XX PROBABLY A DNS MISCONFIGURATION
      ::
      =/  =TANG
        :~  ?~(R.REP LEAF+"~" (SELL !>(U.R.REP)))
            LEAF+"ACTUAL:"
            (SELL !>((SOME BOD)))
            LEAF+"EXPECTED:"
        ==
      (EMIT (NOTIFY 'DOMAIN VALIDATION VALUE IS WRONG' TANG))
    FINALIZE-TRIAL:EFFECT
  ::  +FINALIZE-TRIAL:
  ::
  ++  FINALIZE-TRIAL
    |=  [WIR=WIRE REP=HTTR]
    ^+  THIS
    ~|  [%STRANGE-FINALIZE-TRIAL WIR]
    ?>  ?=(^ ROD)
    ?>  ?=(^ ACTIVE.AUT.U.ROD)
    =*  AUT  U.ACTIVE.AUT.U.ROD
    ?.  =(200 P.REP)
      ::  XX POSSIBLE 204? ASSUME PENDING?
      ::  XX HANDLE "CHALLENGE IS NOT PENDING"
      ::
      ?:  =(504 P.REP)
        ::  RETRY TIMEOUTS FREQUENTLY
        ::
        ?:  (LTH TRY 10)
          (RETRY:EFFECT TRY %FINALIZE-TRIAL / (MIN ~M10 (BACKOFF TRY)))
        ::  XX NEXT STEPS, CHECK CONNECTIVITY, ETC. ??
        ::
        (EMIT (NOTIFY (FAILURE-MESSAGE EGO.CAL.AUT) [(SELL !>(REP)) ~]))
      ::  XX GET CHALLENGE, CONFIRM URN:IETF:PARAMS:ACME:ERROR:CONNECTION
      ::
      ::  =/  ERR=ERROR:BODY
      ::    (ERROR:GRAB (NEED (DE-JSON:HTML Q:(NEED R.REP))))
      ::  ?:  =('URN:IETF:PARAMS:ACME:ERROR:MALFORMED' STATUS.ERR)
      ::
      =<  CANCEL-ORDER:EFFECT
      =/  MSG=CORD
       'UNABLE TO FINALIZE DOMAIN VALIDATION CHALLENGE'
      (EMIT (NOTIFY MSG [(SELL !>(REP)) ~]))
    =/  BOD=CHALLENGE:BODY
      (CHALLENGE:GRAB (NEED (DE-JSON:HTML Q:(NEED R.REP))))
    ::  XX CHECK FOR OTHER POSSIBLE VALUES IN 200 RESPONSE
    ::  NOTE: MAY HAVE ALREADY BEEN VALIDATED
    ::
    ?>  ?=(?(%PENDING %VALID) SAS.BOD)
    =/  ROD-AUT=ORDER-AUTH
      AUT.U.ROD(ACTIVE ~, DONE [+.AUT(SAS.CAL %PEND) DONE.AUT.U.ROD])
    ?~  PENDING.AUT.U.ROD
      CHECK-ORDER:EFFECT(AUT.U.ROD ROD-AUT)
    GET-AUTHZ:EFFECT(AUT.U.ROD ROD-AUT)
  ::  XX DELETE-TRIAL?
  ::
  ::  +RETRY: RETRY EFFECT AFTER TIMEOUT
  ::
  ++  RETRY
    |=  =WIRE
    ^+  THIS
    ?>  ?=([%TRY @ @TAS *] WIRE)
    =/  TRY  (SLAV %UD I.T.WIRE)
    =*  FEC  ~(. EFFECT (SOME +(TRY)))
    =*  ACT  I.T.T.WIRE
    =*  SPUR  T.T.T.WIRE
    ?+  ACT
        ~&([%UNKNOWN-RETRY ACT] THIS)
      %VALIDATE-DOMAIN
                       ?>  ?=([%IDX @ ~] SPUR)
                       (VALIDATE-DOMAIN:FEC (SLAV %UD I.T.SPUR))
      %DIRECTORY       DIRECTORY:FEC
      %NONCE           ?>  ?=(^ SPUR)
                       (NONCE:FEC T.SPUR)
      %REGISTER        REGISTER:FEC
      %RENEW           RENEW:FEC
      %NEW-ORDER       NEW-ORDER:FEC
      %FINALIZE-ORDER  FINALIZE-ORDER:FEC
      %CHECK-ORDER     CHECK-ORDER:FEC
      %CERTIFICATE     CHECK-ORDER:FEC :: INTENTIONAL
      %GET-AUTHZ       GET-AUTHZ:FEC
      %TEST-TRIAL      TEST-TRIAL:FEC
      %FINALIZE-TRIAL  FINALIZE-TRIAL:FEC
    ==
  --
::  +SIGH-TANG: HANDLE HTTP REQUEST FAILURE
::
++  SIGH-TANG
  |=  [=WIRE =TANG]
  ^-  (QUIP MOVE _THIS)
  ?>  ?=([%ACME ^] WIRE)
  ::  XX MAY GOD FORGIVE ME FOR THIS
  ::
  =<  ABET
  =-  ?:(?=(%& -.-) P.- THIS)
  %-  MULE  |.
  (RETRY:EVENT T.WIRE)
::  +SIGH-RECOVERABLE-ERROR: HANDLE HTTP RATE-LIMIT RESPONSE
::
::    XX WE WON'T RECEIVE THIS UNLESS WE REQUEST A
::    MARK CONVERSION AND IT FAILS
::
++  SIGH-RECOVERABLE-ERROR
  |=  [=WIRE %429 %RATE-LIMIT LIM=(UNIT @DA)]
  ^-  (QUIP MOVE _THIS)
  ~&  [%SIGH-RECOVERABLE WIRE LIM]
  ?>  ?=([%ACME ^] WIRE)
  ABET:(RETRY:EVENT T.WIRE)
::  +SIGH-HTTR: ACCEPT HTTP RESPONSE
::
++  SIGH-HTTR
  |=  [=WIRE REP=HTTR]
  ^-  (QUIP MOVE _THIS)
  ?>  ?=([%ACME ^] WIRE)
  =<  ABET
  ::  ADD NONCE TO POOL, IF PRESENT
  ::
  =/  NONHED  (SKIM Q.REP |=((PAIR @T @T) ?=(%REPLAY-NONCE P)))
  =?  NONCES  ?=(^ NONHED)  [Q.I.NONHED NONCES]
  ::
  ?>  ?=([%TRY @ @TAS *] T.WIRE)
  =/  TRY  (SLAV %UD I.T.T.WIRE)
  =*  VEN  ~(. EVENT TRY)
  =*  ACT  I.T.T.T.WIRE
  =*  SPUR  T.T.T.T.WIRE
  ::  BACKOFF IF RATE-LIMITED
  ::
  ?:  =(429 P.REP)
    (RATE-LIMITED TRY ACT SPUR R.REP)
  ::  REQUEST NONCE IF EXPIRED-INVALID
  ::
  ?:  (BAD-NONCE REP)
    (NONCE:EFFECT SPUR)
  ::  XX REPLACE WITH :HALL NOTIFICATION
  ::
  ~|  [%SIGH-FAIL WIRE]
  %.  [SPUR REP]
  ?+  ACT
      ~&([%UNKNOWN-HTTP-RESPONSE ACT] !!)
    %VALIDATE-DOMAIN
                     VALIDATE-DOMAIN:VEN
    %DIRECTORY       DIRECTORY:VEN
    %NONCE           NONCE:VEN
    %REGISTER        REGISTER:VEN
    ::  XX REKEY
    ::
    %NEW-ORDER       NEW-ORDER:VEN
    %FINALIZE-ORDER  FINALIZE-ORDER:VEN
    %CHECK-ORDER     CHECK-ORDER:VEN
    %CERTIFICATE     CERTIFICATE:VEN
    %GET-AUTHZ       GET-AUTHZ:VEN
    ::  XX CHECK/FINALIZE-AUTHZ ??
    ::
    %TEST-TRIAL      TEST-TRIAL:VEN
    %FINALIZE-TRIAL  FINALIZE-TRIAL:VEN
    ::  XX DELETE-TRIAL?
    ::
  ==
::  +WAKE: TIMER WAKEUP EVENT
::
++  WAKE
  |=  [WIR=WIRE ~]
  ^-  (QUIP MOVE _THIS)
  ?>  ?=([%ACME *] WIR)
  ABET:(RETRY:EVENT T.WIR)
::  +POKE-ACME-ORDER: CREATE NEW ORDER FOR A SET OF DOMAINS
::
++  POKE-ACME-ORDER
  |=  A=(SET TURF)
  ABET:(ADD-ORDER A)
::  +POKE-NOUN: FOR DEBUGGING
::
++  POKE-NOUN
  |=  A=*
  ^-  (QUIP MOVE _THIS)
  =<  ABET
  ?+  A
    THIS
  ::
      %DBUG-ACCOUNT
    ~&  REGISTERED=REG.ACT
    ~&  [%PUBLIC (PASS:EN:PEM:PKCS1 KEY.ACT)]
    ~?  !=(~ SEK.KEY.ACT)
      [%PRIVATE (RING:EN:PEM:PKCS1 KEY.ACT)]
    THIS
  ::
      %DBUG-CERTIFICATE
    ?~  LIV  ~&(~ THIS)
    ~&  [%KEY (RING:EN:PEM:PKCS8 KEY.U.LIV)]
    ~&  [%CERT `WAIN`CER.U.LIV]
    ~&  [%EXPIRES EXP.U.LIV]
    ~&  :-  %DOMAINS
        (JOIN ', ' (TURN ~(TAP IN DOM.U.LIV) |=(A=TURF (JOIN '.' A))))
    THIS
  ::
      %DBUG-HISTORY
    ~&  [%ACCOUNT-HISTORY ACT.HIT]
    ~&  [%CONFIG-HISTORY FIG.HIT]
    ~&  [%FAILED-ORDER-HISTORY FAL.HIT]
    THIS
  ::
      %INIT
    INIT
  ::
      %REGISTER
    REGISTER:EFFECT
  ::
      %POLL
    CHECK-ORDER:EFFECT
  ::
      %RETRY
    (ADD-ORDER (SY /NETWORK/ARVO/(CRIP +:(SCOW %P OUR.BOW)) ~))
  ==
::  +POKE-PATH: FOR DEBUGGING
::
++  POKE-PATH
  |=(A=PATH ABET:(ADD-ORDER (SY A ~)))
::  +PREP: INITIALIZE AND ADAPT STATE
::
++  PREP
  |=  OLD=(UNIT ACME)
  ^-  (QUIP MOVE _THIS)
  ?~  OLD
    [~ THIS]
  [~ THIS(+<+ U.OLD)]
::  +REKEY: CREATE NEW 2.048 BIT RSA KEY
::
::    XX DO SOMETHING ABOUT THIS ITERATION
::
++  REKEY
  |=  ENY=@
  =|  I=@
  |-  ^-  KEY:RSA
  =/  K  (NEW-KEY:RSA 2.048 ENY)
  =/  M  (MET 0 N.PUB.K)
  ::  ?:  =(0 (MOD M 8))  K
  ?:  =(2.048 M)  K
  ~&  [%KEY ITER=I WIDTH=M]
  $(I +(I), ENY +(ENY))
::  +INIT: INITIALIZE :ACME STATE
::
::    WE DEFER THE INITIAL REQUEST FOR INDEPENDENCE FROM THE CAUSAL EVENT,
::    WHICH IS NECESSARY TO INIT ON THE BOOT EVENT. WHICH WE NO LONGER DO,
::    BUT WE'RE PRESERVING THE PATTERN FOR FUTURE FLEXIBILITY.
::
++  INIT
  =<  (RETRY:EFFECT 0 %DIRECTORY / `@DR`1)
  %=  THIS
    ACT  [(REKEY ENY.BOW) ~]
    CEY  (REKEY (MIX ENY.BOW (SHAZ NOW.BOW)))
  ==
::  +QUEUE-NEXT-ORDER: ENQUEUE DOMAINS FOR VALIDATION
::
++  QUEUE-NEXT-ORDER
  |=  [VALID=? DOM=(SET TURF)]
  ^+  THIS
  %=  THIS  NEXT-ORDER
    :-  ~
    %+  ROLL
      ~(TAP IN DOM)
    |=  [=TURF STATE=(MAP TURF [IDX=@UD VALID=?])]
    (~(PUT BY STATE) TURF [~(WYT BY STATE) VALID])
  ==
::  +CANCEL-CURRENT-ORDER: AND ARCHIVE FAILURE FOR FUTURE AUTOPSY
::
::    XX WE MAY HAVE PENDING MOVES OUT FOR THIS ORDER
::    PUT DATES IN WIRES, CHECK AGAINST ORDER CREATION DATE?
::    OR RE-USE ORDER-ID?
::
++  CANCEL-CURRENT-ORDER
  ^+  THIS
  ?~  ROD  THIS
  %=  THIS
    ROD      ~
    FAL.HIT  [U.ROD FAL.HIT]
  ==
::  +ADD-ORDER: ADD NEW CERTIFICATE ORDER
::
++  ADD-ORDER
  |=  DOM=(SET TURF)
  ^+  THIS
  ?:  =(~ DOM)
    ~|(%ACME-EMPTY-CERTIFICATE-ORDER !!)
  ?:  ?=(?(%EARL %PAWN) (CLAN:TITLE OUR.BOW))
    THIS
  =.  ..THIS  (QUEUE-NEXT-ORDER | DOM)
  =.  ..THIS  CANCEL-CURRENT-ORDER
  ::  NOTIFY :HALL
  ::
  =.  ..THIS
    =/  MSG=CORD
      %+  RAP  3
      :~  'REQUESTING AN HTTPS CERTIFICATE FOR '
          (JOIN ', ' (TURN ~(TAP IN DOM) |=(A=TURF (JOIN '.' A))))
      ==
    (EMIT (NOTIFY MSG ~))
  ::  IF REGISTERED, CREATE ORDER
  ::
  ?^  REG.ACT
    (VALIDATE-DOMAIN:EFFECT 0)
  ::  IF INITIALIZED, DEFER
  ::
  ?.(=(ACT *ACCT) THIS INIT)
--
