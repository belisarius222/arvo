::  WATCHER: ETHEREUM EVENT LOG COLLECTOR
::
/+  *ETH-WATCHER
::
=,  ETHEREUM
=,  RPC
::
|%
++  STATE
  $:  EYES=(MAP NAME EYE)
  ==
::
++  EYE
  $:  CONFIG
      LATEST-BLOCK=@UD
      FILTER-ID=@UD
      POLL-TIMER=(UNIT @DA)
      SNAPSHOT
      SAP=HISTORY
  ==
::
++  HISTORY
  $:  INTERVAL=_100
      MAX-COUNT=_10
      COUNT=@UD
      LATEST-BLOCK=@UD
      SNAPS=(QEU SNAPSHOT)
  ==
::
++  MOVE  (PAIR BONE CARD)
++  CARD
  $%  [%HISS WIRE (UNIT USER:EYRE) MARK %HISS HISS:EYRE]
      [%WAIT WIRE @DA]
      [%REST @DA]
      [%INFO WIRE DESK NORI:CLAY]
      [%DIFF %ETH-WATCHER-UPDATE UPDATE]
      [%QUIT ~]
  ==
--
::
|_  [BOWL:GALL STATE]
::
++  PREP
  |=  OLD=(UNIT STATE)
  ?~  OLD
    [~ ..PREP]
  [~ ..PREP(+<+ U.OLD)]
::
++  POKE-NOUN
  |=  [WHAT=?(%SAVE %LOAD) =NAME]
  ^-  (QUIP MOVE _+>)
  =+  EYE=(FALL (~(GET BY EYES) NAME) *EYE)
  ?-  WHAT
      %SAVE
    =/  PAX=PATH
      /(SCOT %P OUR)/HOME/(SCOT %DA NOW)/WATCHER/[NAME]/JAM
    :_  +>.$
    :_  ~
    ^-  MOVE
    :*  OST
        %INFO
        /JAMFILE
        (FOAL:SPACE:USERLIB PAX [%JAM !>((JAM EYE))])
    ==
  ::
      %LOAD
    =.  EYES
      %+  ~(PUT BY EYES)  NAME
      =-  (^EYE (CUE .^(@ %CX -)))
      /(SCOT %P OUR)/HOME/(SCOT %DA NOW)/WATCHER/[NAME]/JAM
    DONE:NEW-FILTER:(OPEN:WATCHER NAME)
  ==
::
++  POKE-ETH-WATCHER-ACTION
  |=  ACT=ACTION
  ^-  (QUIP MOVE _+>)
  ?-  -.ACT
      %WATCH
    DONE:(INIT:WATCHER +.ACT)
  ::
      %CLEAR
    WIPE:(OPEN:WATCHER +.ACT)
  ==
::
++  PEEK-X
  |=  PAX=PATH
  ^-  (UNIT (UNIT [%NOUN *]))
  ?.  ?=([@ *] PAX)  ~
  =+  EYE=(~(GET BY EYES) I.PAX)
  ?~  EYE  [~ ~]
  ::  /NAME: ALL LOGS
  ::
  ?~  T.PAX  ``[%NOUN LOGS.U.EYE]
  ::  /NAME/NUM: MOST RECENT NUM LOGS
  ::
  =+  NUM=(SLAW %UD I.T.PAX)
  ?^  NUM  ``[%NOUN (SCAG U.NUM LOGS.U.EYE)]
  ::  /NAME/DEBUG: DEBUG INFORMATION
  ::
  ?.  ?=(%DEBUG I.T.PAX)  ~
  =-  ``[%NOUN -]
  =,  U.EYE
  :*  NODE=(EN-PURL:HTML NODE)
      LAST=LAST-HEARD-BLOCK
      LENT=(LENT LOGS)
      TIME=POLL-TIMER
  ==
::
++  PEER
  |=  PAX=PATH
  ^-  (QUIP MOVE _+>)
  ?>  ?=([@ ~] PAX)
  DONE:(PUT-SNAPSHOT-DIFF:(OPEN:WATCHER I.PAX) OST)
::
++  WAKE
  |=  [WIR=WIRE ~]
  ^-  (QUIP MOVE _+>)
  ?>  ?=([@ %POLL ~] WIR)
  DONE:POLL-FILTER:(OPEN:WATCHER I.WIR)
::
++  SIGH-TANG
  |=  [WIR=WIRE RES=TANG]
  ^-  (QUIP MOVE _+>)
  ~&  ['SOMETHING WENT WRONG!' WIR]
  ~_  RES
  [~ +>.$]
::
++  SIGH-JSON-RPC-RESPONSE
  |=  [WIR=WIRE RES=RESPONSE:RPC:JSTD]
  ^-  (QUIP MOVE _+>)
  ?>  ?=([@ *] WIR)
  =<  DONE
  %-  SIGH-JSON-RPC-RESPONSE:(OPEN:WATCHER I.WIR)
  [T.WIR RES]
::
++  WATCHER
  |_  $:  =NAME
          =EYE
          REWIND-BLOCK=(UNIT @UD)
          NEW-LOGS=LOGLIST
          MOVES=(LIST MOVE)
      ==
  ::
  ::  +OPEN: INITIALIZE CORE
  ::
  ++  OPEN
    |=  NOM=^NAME
    ^+  +>
    +>.$(NAME NOM, EYE (~(GOT BY EYES) NOM))
  ::
  ::  +INIT: SET UP EYE AND INITIALIZE CORE
  ::
  ++  INIT
    |=  [NOM=^NAME =CONFIG]
    ^+  +>
    =.  NAME  NOM
    =.  EYE
      %*(. *^EYE - CONFIG, LAST-HEARD-BLOCK FROM-BLOCK.CONFIG)
    GET-LATEST-BLOCK
  ::
  ::  +|  OUTWARD
  ::
  ::  +WIPE: DELETE EYE
  ::
  ++  WIPE
    =>  CANCEL-WAIT-POLL
    =>  CANCEL-SUBSCRIBERS
    :-  (FLOP MOVES)
    ..WATCHER(EYES (~(DEL BY EYES) NAME))
  ::
  ::  +DONE: STORE CHANGES, UPDATE SUBSCRIBERS
  ::
  ++  DONE
    ^-  [(LIST MOVE) _..WATCHER]
    =?  .  ?=(^ REWIND-BLOCK)
      ::  IF WE'RE REWINDING TO A BLOCK, THEN WE THROW AWAY ANY MOVES
      ::  AND CHANGES WE WERE GOING TO MAKE.
      ::
      =:  MOVES     *(LIST MOVE)
          NEW-LOGS  *LOGLIST
        ==
      (RESTORE-BLOCK U.REWIND-BLOCK)
    ::  IF WE HAVE ANY UPDATES, SEND THEM
    ::
    =?  .  !=(~ NEW-LOGS)
      (FAN-DIFF %LOGS NEW-LOGS)
    ::  PRODUCE MOVES, STORE UPDATED STATE
    ::
    :-  (FLOP MOVES)
    ..WATCHER(EYES (~(PUT BY EYES) NAME EYE))
  ::
  ::  +PUT-MOVE: STORE SIDE-EFFECT
  ::
  ++  PUT-MOVE
    |=  =CARD
    %_(+> MOVES [[OST CARD] MOVES])
  ::
  ++  PUT-MOVES
    |=  MOZ=(LIST MOVE)
    %_(+> MOVES (WELD (FLOP MOZ) MOVES))
  ::
  ::  +PUT-RPC-REQUEST: STORE RPC REQUEST TO ETHEREUM NODE
  ::
  ++  PUT-RPC-REQUEST
    |=  [WIR=WIRE ID=(UNIT @T) REQ=REQUEST]
    ^+  +>
    %-  PUT-MOVE
    ^-  CARD
    :*  %HISS
        [NAME WIR]
        ~
        %JSON-RPC-RESPONSE
        %HISS
        %+  JSON-REQUEST  NODE.EYE
        (REQUEST-TO-JSON ID REQ)
    ==
  ::
  ::  +PUT-LOG: STORE CHANGE MADE BY EVENT
  ::
  ++  PUT-LOG
    |=  LOG=EVENT-LOG
    %_  +>
      NEW-LOGS    (STORE-NEW-LOGS ~[LOG] NEW-LOGS)
      LOGS.EYE    (STORE-NEW-LOGS ~[LOG] LOGS.EYE)
      HEARD.EYE   (~(PUT IN HEARD.EYE) (LOG-TO-ID LOG))
    ==
  ::
  ::  +|  SUBSCRIPTIONS
  ::
  ++  PUT-DIFF
    |=  [FOR=BONE DIF=UPDATE]
    %_(+> MOVES [[FOR %DIFF %ETH-WATCHER-UPDATE DIF] MOVES])
  ::
  ++  PUT-SNAPSHOT-DIFF
    |=  FOR=BONE
    (PUT-DIFF FOR %SNAP LAST-HEARD-BLOCK.EYE HEARD.EYE LOGS.EYE)
  ::
  ++  GET-SUBSCRIBERS
    ^-  (LIST BONE)
    %+  MURN  ~(TAP BY SUP)
    |=  [B=BONE S=SHIP P=PATH]
    ^-  (UNIT BONE)
    ?>  ?=([@ *] P)
    ?:(=(NAME I.P) `B ~)
  ::
  ++  FAN-DIFF
    |=  DIF=UPDATE
    %-  PUT-MOVES
    %+  TURN  GET-SUBSCRIBERS
    |=  B=BONE
    ^-  MOVE
    [B %DIFF %ETH-WATCHER-UPDATE DIF]
  ::
  ++  CANCEL-SUBSCRIBERS
    %-  PUT-MOVES
    %+  TURN  GET-SUBSCRIBERS
    |=(B=BONE [B %QUIT ~])
  ::
  ::  +|  CATCH-UP-OPERATIONS
  ::
  ::  +GET-LATEST-BLOCK
  ::
  ::    GET LATEST BLOCK FROM ETH NODE AND COMPARE TO OUR OWN LATEST BLOCK.
  ::    GET INTERVENING BLOCKS IN CHUNKS UNTIL WE'RE CAUGHT UP, THEN SET
  ::    UP A FILTER GOING FORWARD.
  ::
  ++  GET-LATEST-BLOCK
    =>  CANCEL-WAIT-POLL
    (PUT-RPC-REQUEST /CATCH-UP/BLOCK-NUMBER `'BLOCK NUMBER' %ETH-BLOCK-NUMBER ~)
  ::
  ::  +CATCH-UP: GET NEXT CHUNK
  ::
  ++  CATCH-UP
    |=  FROM-BLOCK=@UD
    ^+  +>
    ?:  (GTE FROM-BLOCK LATEST-BLOCK.EYE)
      NEW-FILTER
    =/  NEXT-BLOCK  (MIN LATEST-BLOCK.EYE (ADD FROM-BLOCK 5.760))  ::  ~D1
    ~?  DEBUG=|
      [%CATCHING-UP FROM=FROM-BLOCK TO=LATEST-BLOCK.EYE]
    %-  PUT-RPC-REQUEST
    :+  /CATCH-UP/STEP/(SCOT %UD FROM-BLOCK)/(SCOT %UD NEXT-BLOCK)
      `'CATCH UP'
    :*  %ETH-GET-LOGS
        `NUMBER+FROM-BLOCK
        `NUMBER+NEXT-BLOCK
        CONTRACTS.EYE
        TOPICS.EYE
    ==
  ::
  ::  +|  FILTER-OPERATIONS
  ::
  ::  +NEW-FILTER: REQUEST A NEW POLLING FILTER
  ::
  ::    LISTENS FROM THE LAST-HEARD BLOCK ONWARD.
  ::
  ++  NEW-FILTER
    %-  PUT-RPC-REQUEST
    :+  /FILTER/NEW  `'NEW FILTER'
    ^-  REQUEST:RPC
    :*  %ETH-NEW-FILTER
        `NUMBER+LAST-HEARD-BLOCK.EYE
        ?~(TO-BLOCK.EYE ~ `NUMBER+U.TO-BLOCK.EYE)
        CONTRACTS.EYE
        TOPICS.EYE
    ==
  ::
  ::  +READ-FILTER: GET ALL EVENTS THE FILTER CAPTURES
  ::
  ++  READ-FILTER
    %-  PUT-RPC-REQUEST
    :+  /FILTER/LOGS  `'FILTER LOGS'
    [%ETH-GET-FILTER-LOGS FILTER-ID.EYE]
  ::
  ::  +POLL-FILTER: GET ALL NEW EVENTS SINCE LAST POLL (OR FILTER CREATION)
  ::
  ++  POLL-FILTER
    ?:  =(0 FILTER-ID.EYE)
      ~&  %NO-FILTER-BAD-POLL
      .
    %-  PUT-RPC-REQUEST
    :+  /FILTER/CHANGES  `'POLL FILTER'
    [%ETH-GET-FILTER-CHANGES FILTER-ID.EYE]
  ::
  ::  +WAIT-POLL: REMIND US TO POLL IN FOUR MINUTES
  ::
  ::    FOUR MINUTES BECAUSE ETHEREUM RPC FILTERS TIME OUT AFTER FIVE.
  ::    WE DON'T CHECK FOR AN EXISTING TIMER OR CLEAR AN OLD ONE HERE,
  ::    SANE FLOWS SHOULDN'T SEE THIS BEING CALLED SUPERFLUOUSLY.
  ::
  ++  WAIT-POLL
    =+  WEN=(ADD NOW ~M4)
    %-  PUT-MOVE(POLL-TIMER.EYE `WEN)
    [%WAIT NAME^/POLL WEN]
  ::
  ::  +CANCEL-WAIT-POLL: REMOVE POLL REMINDER
  ::
  ++  CANCEL-WAIT-POLL
    ?~  POLL-TIMER.EYE  ..CANCEL-WAIT-POLL
    %-  PUT-MOVE(POLL-TIMER.EYE ~)
    [%REST U.POLL-TIMER.EYE]
  ::
  ::  +|  FILTER-RESULTS
  ::
  ::  +SIGH-JSON-RPC-RESPONSE: PROCESS RPC RESPONSE
  ::
  ++  SIGH-JSON-RPC-RESPONSE
    |=  [WIR=WIRE RES=RESPONSE:RPC:JSTD]
    ^+  +>
    ~!  -.RES
    ?:  ?=(%FAIL -.RES)
      ?:  =(405 P.HIT.RES)
        ~&  'HTTP 405 ERROR (EXPECTED IF USING INFURA)'
        +>.$
      ?.  =(5 (DIV P.HIT.RES 100))
        ~&  [%HTTP-ERROR HIT.RES]
        +>.$
      ?+  WIR
        ~&  [%RETRYING-NODE ~] ::((SOFT TANG) Q.RES)]
        WAIT-POLL
          [%CATCH-UP %STEP @TA @TA ~]
        ~&  %RETRYING-CATCH-UP
        (CATCH-UP (SLAV %UD `@TA`I.T.T.WIR))
      ==
    ?+  WIR  ~|([%WEIRD-SIGH-WIRE WIR] !!)
        [%FILTER %NEW *]
      (TAKE-NEW-FILTER RES)
    ::
        [%FILTER *]
      (TAKE-FILTER-RESULTS RES)
    ::
        [%CATCH-UP %BLOCK-NUMBER ~]
      (TAKE-BLOCK-NUMBER RES)
    ::
        [%CATCH-UP %STEP @TA @TA ~]
      =/  FROM-BLOCK  (SLAV %UD `@TA`I.T.T.WIR)
      =/  NEXT-BLOCK  (SLAV %UD `@TA`I.T.T.T.WIR)
      (TAKE-CATCH-UP-STEP RES FROM-BLOCK NEXT-BLOCK)
    ==
  ::
  ::  +TAKE-NEW-FILTER: STORE FILTER-ID AND READ IT
  ::
  ++  TAKE-NEW-FILTER
    |=  REP=RESPONSE:RPC:JSTD
    ^+  +>
    ~|  REP
    ?<  ?=(%BATCH -.REP)
    ?<  ?=(%FAIL -.REP)
    ?:  ?=(%ERROR -.REP)
      ~&  [%FILTER-ERROR--RETRYING MESSAGE.REP]
      NEW-FILTER
    =-  READ-FILTER(FILTER-ID.EYE -)
    (PARSE-ETH-NEW-FILTER-RES RES.REP)
  ::
  ::  +TAKE-FILTER-RESULTS: PARSE RESULTS INTO EVENT-LOGS AND PROCESS THEM
  ::
  ++  TAKE-FILTER-RESULTS
    |=  REP=RESPONSE:RPC:JSTD
    ^+  +>
    ?<  ?=(%BATCH -.REP)
    ?<  ?=(%FAIL -.REP)
    ?:  ?=(%ERROR -.REP)
      ?.  ?|  =('FILTER NOT FOUND' MESSAGE.REP)  ::  GETH
              =('FILTER NOT FOUND' MESSAGE.REP)  ::  PARITY
          ==
        ~&  [%UNHANDLED-FILTER-ERROR +.REP]
        +>
      ~&  [%FILTER-TIMED-OUT--RECREATING BLOCK=LAST-HEARD-BLOCK.EYE +.REP]
      ::  ARGUABLY SHOULD REWIND 40 BLOCKS ON THE OFF CHANCE THE CHAIN REORGANIZED
      ::  WHEN WE BLINKED.  THIS WILL ALSO RESTART THE FILTER.
      ::
      ::  (RESTORE-BLOCK ?:((LTH LAST-HEARD-BLOCK 40) 0 (SUB.ADD LAST-HEARD-BLOCK 40)))
      ::
      ::  COUNTER-ARGUMENT: IT'S A ROYAL PAIN TO RESTORE FROM A SNAPSHOT
      ::  EVERY TIME YOU CAN'T PING THE NODE FOR 5 MINUTES.  THIS IS LIKELY
      ::  TO DESTABILIZE THE NETWORK.  BETTER TO MANUALLY RESTORE IF WE
      ::  NOTICE AN ANOMALY.
      ::
      ::  THIRD WAY: DON'T TRUST ANYTHING THAT DOESN'T HAVE 40 CONFIRMATIONS
      ::
      NEW-FILTER
    ::  KICK POLLING TIMER, ONLY IF IT HASN'T ALREADY BEEN.
    =?  +>  |(?=(~ POLL-TIMER.EYE) (GTH NOW U.POLL-TIMER.EYE))
      WAIT-POLL
    (TAKE-EVENTS REP)
  ::
  ::  +TAKE-BLOCK-NUMBER: TAKE BLOCK NUMBER AND START CATCHING UP
  ::
  ++  TAKE-BLOCK-NUMBER
    |=  REP=RESPONSE:RPC:JSTD
    ^+  +>
    ?<  ?=(%BATCH -.REP)
    ?<  ?=(%FAIL -.REP)
    ?:  ?=(%ERROR -.REP)
      ~&  [%TAKE-BLOCK-NUMBER-ERROR--RETRYING MESSAGE.REP]
      GET-LATEST-BLOCK
    =.  LATEST-BLOCK.EYE  (PARSE-ETH-BLOCK-NUMBER RES.REP)
    (CATCH-UP LAST-HEARD-BLOCK.EYE)
  ::
  ::  +TAKE-CATCH-UP-STEP: PROCESS CHUNK
  ::
  ++  TAKE-CATCH-UP-STEP
    |=  [REP=RESPONSE:RPC:JSTD FROM-BLOCK=@UD NEXT-BLOCK=@UD]
    ^+  +>
    ?<  ?=(%BATCH -.REP)
    ?<  ?=(%FAIL -.REP)
    ?:  ?=(%ERROR -.REP)
      ~&  [%CATCH-UP-STEP-ERROR--RETRYING MESSAGE.REP]
      (CATCH-UP FROM-BLOCK)
    =.  +>.$  (TAKE-EVENTS REP)
    (CATCH-UP NEXT-BLOCK)
  ::
  ::  +TAKE-EVENTS: PROCESS EVENTS
  ::
  ++  TAKE-EVENTS
    |=  REP=RESPONSE:RPC:JSTD
    ^+  +>
    ?<  ?=(%BATCH -.REP)
    ?<  ?=(%FAIL -.REP)
    ?<  ?=(%ERROR -.REP)
    ?.  ?=(%A -.RES.REP)
      ~&  [%EVENTS-NOT-ARRAY REP]
      !!
    =*  CHANGES  P.RES.REP
    ~?  &(DEBUG=| (GTH (LENT CHANGES) 0))
      :*  %PROCESSING-CHANGES
          CHANGES=(LENT CHANGES)
          BLOCK=LAST-HEARD-BLOCK.EYE
          ID=FILTER-ID.EYE
      ==
    |-  ^+  +>.^$
    ?~  CHANGES  +>.^$
    =.  +>.^$
      (TAKE-EVENT-LOG (PARSE-EVENT-LOG I.CHANGES))
    $(CHANGES T.CHANGES)
  ::
  ::  +TAKE-EVENT-LOG: OBTAIN CHANGES FROM EVENT-LOG
  ::
  ++  TAKE-EVENT-LOG
    |=  LOG=EVENT-LOG
    ^+  +>
    ?~  MINED.LOG
      ~&  %IGNORING-UNMINED-EVENT
      +>
    =*  PLACE  U.MINED.LOG
    ?:  (~(HAS IN HEARD.EYE) BLOCK-NUMBER.PLACE LOG-INDEX.PLACE)
      ?.  REMOVED.U.MINED.LOG
        ~?  DEBUG=|
          [%IGNORING-DUPLICATE-EVENT TX=TRANSACTION-HASH.U.MINED.LOG]
        +>
      ::  BLOCK WAS REORGANIZED AWAY, SO REWIND TO THIS BLOCK AND
      ::  START SYNCING AGAIN.
      ::
      ~&  :*  'REMOVED EVENT!  PERHAPS CHAIN HAS REORGANIZED?'
              TX-HASH=TRANSACTION-HASH.U.MINED.LOG
              BLOCK-NUMBER=BLOCK-NUMBER.U.MINED.LOG
              BLOCK-HASH=BLOCK-HASH.U.MINED.LOG
          ==
      %=    +>
          REWIND-BLOCK
        :-  ~
        ?~  REWIND-BLOCK
          BLOCK-NUMBER.PLACE
        (MIN BLOCK-NUMBER.PLACE U.REWIND-BLOCK)
      ==
    =.  LAST-HEARD-BLOCK.EYE
      (MAX BLOCK-NUMBER.PLACE LAST-HEARD-BLOCK.EYE)
    ?:  ?&  (GTE BLOCK-NUMBER.PLACE FROM-BLOCK.EYE)
            ?|  ?=(~ TO-BLOCK.EYE)
                (LTE BLOCK-NUMBER.PLACE U.TO-BLOCK.EYE)
            ==
        ==
      (PUT-LOG LOG)
    ~&  :*  %EVENT-BLOCK-OUT-OF-RANGE
            GOT=BLOCK-NUMBER.PLACE
            FROM=FROM-BLOCK.EYE
            TO=TO-BLOCK.EYE
        ==
    +>.$
  ::
  ::  +RESTORE-BLOCK: REWIND TO BLOCK OR EARLIER
  ::
  ++  RESTORE-BLOCK
    |=  BLOCK=@UD
    ^+  +>
    =/  OLD-QEU  SNAPS.SAP.EYE
    ::  CLEAR HISTORY
    ::
    =:  SNAPS.SAP.EYE       ~
        COUNT.SAP.EYE       0
        LATEST-BLOCK.SAP.EYE  0
      ==
    ::  FIND A SNAPSHOT WE CAN USE, REMOVE ONES THAT ARE TOO NEW
    ::
    =^  SNAP=SNAPSHOT  +>.$
      ?:  |(=(~ OLD-QEU) (LTH BLOCK LAST-HEARD-BLOCK:(NEED ~(TOP TO OLD-QEU))))
        [%*(. *SNAPSHOT LAST-HEARD-BLOCK FROM-BLOCK.EYE) +>.$]
      |-  ^-  [SNAPSHOT _+>.^$]
      =^  SNAP=SNAPSHOT  OLD-QEU
        ~(GET TO OLD-QEU)
      =:  COUNT.SAP.EYE       +(COUNT.SAP.EYE)
          LATEST-BLOCK.SAP.EYE  LAST-HEARD-BLOCK.SNAP
          SNAPS.SAP.EYE       (~(PUT TO SNAPS.SAP.EYE) SNAP)
        ==
      ?:  |(=(~ OLD-QEU) (LTH BLOCK LAST-HEARD-BLOCK:(NEED ~(TOP TO OLD-QEU))))
        [SNAP +>.^$]
      $
    ~&  [%RESTORING-BLOCK BLOCK LAST-HEARD-BLOCK.SNAP]
    (RESTORE-SNAP SNAP)
  ::
  ::  +RESTORE-SNAP: REVERT STATE TO SNAPSHOT
  ::
  ++  RESTORE-SNAP
    |=  SNAP=SNAPSHOT
    ^+  +>
    ::  NOTIFY SUBSCRIBERS
    ::TODO  BE MORE NUANCED ABOUT WHAT CHANGED, MAYBE
    ::
    =.  +>.$  (FAN-DIFF SNAP+SNAP)
    ::  RESTORE STATE AND KICK NEW FETCH CYCLE
    ::
    %=    GET-LATEST-BLOCK
        LAST-HEARD-BLOCK.EYE  LAST-HEARD-BLOCK.SNAP
        HEARD.EYE         HEARD.SNAP
        LOGS.EYE          LOGS.SNAP
    ==
  --
--
